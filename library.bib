Automatically generated by Mendeley Desktop 1.17.11
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Preferences -> BibTeX in Mendeley Desktop

@article{Smith2017,
abstract = {Testing is an important, time-consuming, and often difficult part of the software development process. It is therefore critical to introduce testing early in the computer science curriculum, and to provide students with frequent opportunities for practice and feedback. This paper presents an automated system to help introductory students learn how to test software. Students submit test cases to the system, which uses a large corpus of buggy programs to evaluate these test cases. In addition to gauging the quality of the test cases, the system immediately presents students with feedback in the form of buggy programs that nonetheless pass their tests. This enables students to understand why their test cases are deficient and gives them a starting point for improvement. The system has proven effective in an introductory class: students that trained using the system were later able to write better test cases -- even without any feedback -- than those who were not. Further, students reported additional benefits such as improved ability to read code written by others and to understand multiple approaches to the same problem.},
annote = {Mine an IDE that implicitly versions student code to find buggy/partial programs; use an automated (exhaustive + directed-random) testcase generator to group partial solutions that fail same tests, picking the "least complex" 3 exemplars in each group (in terms of cyclomatic complexity); use these to find gaps in student-authored test cases (students know which case the tests failed to catch, but don't see the source code of the buggy implementation). Prelim experiment suggests students do benefit from this feedback AND demonstrates some transfer, ie they then write better test cases under assessment conditions even WITHOUT the tool's feedback.},
author = {Smith, Rebecca and Tang, Terry and Warren, Joe and Rixner, Scott},
doi = {10.1145/3059009.3059022},
file = {:Users/fox/Documents/fox/papers/mendeley/p98-smith.pdf:pdf},
isbn = {9781450347044},
issn = {1942647X},
journal = {Proceedings of the 2017 ACM Conference on Innovation and Technology in Computer Science Education  - ITiCSE '17},
keywords = {automated assessment,computer science education,interactive learning,software testing},
pages = {98--103},
title = {{An Automated System for Interactively Learning Software Testing}},
url = {http://dl.acm.org/citation.cfm?doid=3059009.3059022},
year = {2017}
}
@article{mooc-spoc-ubiquity,
author = {Fox, Armando},
journal = {Ubiquity},
month = {jun},
pages = {1--13},
title = {{From {\{}MOOCs{\}} to {\{}SPOCs{\}}: Curricular Technology Transfer for the 21st Century}},
url = {http://ubiquity.acm.org/article.cfm?id=2618397},
year = {2014}
}
@article{Dillenbourg2002,
abstract = {Free collaboration does not systematically produce learning. One way to enhance the effectiveness of collaborative learning is to structure interactions by engaging students in well-defined scripts. A collaboration script is a set of instructions prescribing how students should form groups, how they should interact and collaborate and how they should solve the problem. In computer-supported collaborative learning (CSCL), the script is reified in the interface of the learning environment. This contribution dismantles the concept of script. Syntactically, a script is sequence of phases and each phase can be described by five attributes. The grammatical combination of these elements may however produce any kind of pedagogical method, even those that have nothing to do with the idea of collaborative learning. On the one hand, the definition of scripts constitutes a promising convergence between educational engineering and socio-cultural approaches but, on the other hand, it drifts away from the genuine notion of collaborative learning. Will the fun and the richness of group interactions survive to this quest for effectiveness? The answer depends on the semantics of collaborative scripts: what is the design rationale, what is the core mechanism in the script through which the script designer expects to foster productive interactions and learning?},
author = {Dillenbourg, Pierre},
doi = {10.1007/s11165-004-8795-y},
file = {:Users/fox/Documents/fox/papers/mendeley/Dillenbourg-Pierre-2002.pdf:pdf},
isbn = {90-3582-047-9},
issn = {08895406},
journal = {Three worlds of CSCL: Can we support CSCL?},
keywords = {collaboration scripts},
pages = {61--91},
pmid = {10842115},
title = {{Over-scripting CSCL : The risks of blending collaborative learning with instructional design .}},
year = {2002}
}
@article{Kiciman2005,
abstract = {Most Internet services (e-commerce, search engines, etc.) suffer faults. Quickly detecting these faults can be the largest bottleneck in improving availability of the system. We present Pinpoint, a methodology for automating fault detection in Internet services by: 1) observing low-level internal structural behaviors of the service; 2) modeling the majority behavior of the system as correct; and 3) detecting anomalies in these behaviors as possible symptoms of failures. Without requiring any a priori application-specific information, Pinpoint correctly detected 89{\%}-96{\%} of major failures in our experiments, as compared with 20{\%}-70{\%} detected by current application-generic techniques.},
author = {Kiciman, Emre and Fox, Armando},
institution = {Department of Computer Science, Stanford University, Stanford, CA 94305, USA. emrek@cs.stanford.edu},
journal = {IEEE Transactions on Neural Networks},
number = {5},
pages = {1027--1041},
pmid = {16252814},
title = {{Detecting application-level failures in component-based internet services.}},
url = {http://www.ncbi.nlm.nih.gov/pubmed/16252814},
volume = {16},
year = {2005}
}
@misc{Wiley2017,
annote = {"what's wrong with/hindering adoption of OER". {\$}10M spent so far, but mostly resulted in open static content. Key takeaways:
1. Static content, esp. without autograding to free up faculty time, is a nonstarter
2. Remix/reuse is nice to have, but "Ready-to-use out of the box" is must-have. (Steve Cooper agrees)
Note that the above are basically provided by publisher-based textbook/online hybrid systems. If OERs don't provide at least those facilities, they won't be adopted. "PDFs won't get us there" and "Don't talk about how the LMS is the answer—just don't"},
author = {Wiley, David},
booktitle = {EdSurge News},
title = {{Of OER and Platforms: Five Years Later}},
url = {https://www.edsurge.com/news/2017-01-26-of-oer-and-platforms-five-years-later},
year = {2017}
}
@article{science:cloud,
author = {Fox, Armando},
journal = {SCIENCE},
title = {{Cloud computing: what's in it for me as a scientist?}},
volume = {331},
year = {2011}
}
@inproceedings{Bodik2010,
author = {Bodik, Peter and Fox, Armando and Franklin, Michael J and Jordan, Michael I and Patterson, David A},
booktitle = {Proceedings of the 1st ACM symposium on Cloud computing},
doi = {10.1145/1807128.1807166},
isbn = {9781450300360},
pages = {241--252},
publisher = {ACM Press},
series = {SoCC '10},
title = {{Characterizing, modeling, and generating workload spikes for stateful services}},
url = {http://portal.acm.org/citation.cfm?id=1807128.1807166},
volume = {d},
year = {2010}
}
@inproceedings{cutler:rocgs,
address = {Big Sky, Montana},
author = {Cutler, James W and Fox, Armando and Bhasin, Kul},
booktitle = {Proc.IEEE Aerospace Conference},
month = {mar},
title = {{Applying the Lessons of Internet Services to Space Systems}},
year = {2001}
}
@unpublished{cs294,
annote = {$\backslash$url{\{}http://www.cs.berkeley.edu/{\$}\backslashsim{\$}fox/cs294{\}}},
author = {Fox, Armando and Brewer, Eric A},
title = {{{\{}CS{\}} 294-6: Internet Services, class proceedings, Fall 1997}}
}
@article{Armbrust2009a,
abstract = {Collaborative web applications such as Facebook, Flickr and Yelp present new challenges for storing and querying large amounts of data. As users and developers are focused more on performance than single copy consistency or the ability to perform ad-hoc queries, there exists an opportunity for a highly-scalable system tailored specifically for relaxed consistency and pre-computed queries. The Web 2.0 development model demands the ability to both rapidly deploy new features and automatically scale with the number of users. There have been many successful distributed key-value stores, but so far none provide as rich a query language as SQL. We propose a new architecture, SCADS, that allows the developer to declaratively state application specific consistency requirements, takes advantage of utility computing to provide cost effective scale-up and scale-down, and will use machine learning models to introspectively anticipate performance problems and predict the resource requirements of new queries before execution.},
author = {Armbrust, Michael and Fox, Armando and Patterson, David and Lanham, Nick and Trushkowsky, Beth and Trutna, Jesse and Oh, Haruki},
file = {:Users/fox/Documents/fox/papers/mendeley/Armbrust et al. - 2009 - SCADS Scale-Independent Storage for Social Computing Applications.pdf:pdf},
journal = {Systems Research},
pages = {1--7},
publisher = {www.crdrdb.org},
title = {{SCADS: Scale-Independent Storage for Social Computing Applications}},
url = {http://arxiv.org/abs/0909.1775},
year = {2009}
}
@inproceedings{Allen2017,
annote = {Bootcamps are severe, intense, and overall, not fun.
With a few exceptions of bootcamps that focus on specific demographics or have specific internal diversity-empathy programs, they reflect the lack of diversity and associated "informal boundaries" (stereotype/impostor syndrome, belonging, perceived stigma if lack of prior experience) found in CS work and school environments.
They do add some diversity to the workpool, but the diverse students who do get through often do so at great cost.
Unless you are confident, persevering, and committed, you may end up demoralized and broke. Most bootcamps don't help shift any of the time or money risk away from students (in fact those risks seem comparable or worse than for enrolling in a degree program--the personal costs were severe for virtually all subjects interviewed), and job hunting can be "dehumanizing" and not guaranteed to succeed (bootcamp "},
author = {Thayer, Kyle and Ko, Andrew J},
booktitle = {ACM International Computing Education Research Conference},
file = {:Users/fox/Documents/fox/papers/mendeley/Thayer2017CodingBootcamps.pdf:pdf},
isbn = {9781450349680},
keywords = {career change,coding bootcamps,communities of practice,computer science education},
pages = {245--253},
title = {{Barriers Faced by Coding Bootcamp Students}},
year = {2017}
}
@inproceedings{pythia,
address = {Paris, France},
author = {Fox, Armando and Brewer, Eric A},
booktitle = {Fifth International World Wide Web Conference (WWW-5)},
month = {may},
organization = {{\{}W{\}}orld {\{}W{\}}ide {\{}W{\}}eb Consortium},
title = {{Reducing {\{}WWW{\}} {\{}L{\}}atency and {\{}B{\}}andwidth {\{}R{\}}equirements via {\{}R{\}}eal-{\{}T{\}}ime {\{}D{\}}istillation}},
year = {1996}
}
@inproceedings{candea:crash-only,
address = {Lihue, HI},
author = {Candea, George and Fox, Armando},
booktitle = {Proc.9th {\{}W{\}}orkshop on {\{}H{\}}ot {\{}T{\}}opics in {\{}O{\}}perating {\{}S{\}}ystems},
month = {jun},
title = {{Crash-Only Software}},
year = {2003}
}
@article{Cohen2005,
abstract = {We present a method for automatically extracting from a running system an indexable signature that distills the essential characteristic from a system state and that can be subjected to automated clustering and similarity-based retrieval to identify when an observed system state is similar to a previously-observed state. This allows operators to identify and quantify the frequency of recurrent problems, to leverage previous diagnostic efforts, and to establish whether problems seen at different installations of the same site are similar or distinct. We show that the naive approach to constructing these signatures based on simply recording the actual ``raw'' values of collected measurements is ineffective, leading us to a more sophisticated approach based on statistical modeling and inference. Our method requires only that the system's metric of merit (such as average transaction response time) as well as a collection of lower-level operational metrics be collected, as is done by existing commercial monitoring tools. Even if the traces have no annotations of prior diagnoses of observed incidents (as is typical), our technique successfully clusters system states corresponding to similar problems, allowing diagnosticians to identify recurring problems and to characterize the ``syndrome'' of a group of problems. We validate our approach on both synthetic traces and several weeks of production traces from a customer-facing geoplexed 24 x 7 system; in the latter case, our approach identified a recurring problem that had required extensive manual diagnosis, and also aided the operators in correcting a previous misdiagnosis of a different problem.},
author = {Cohen, Ira and Zhang, Steve and Goldszmidt, Moises and Symons, Julie and Kelly, Terence and Fox, Armando},
doi = {10.1145/1095809.1095821},
institution = {ACM},
isbn = {1595930795},
issn = {01635980},
journal = {ACM SIGOPS Operating Systems Review},
keywords = {bayesian networks,clustering,information retrieval,mance objectives,past,perfor,signatures,those who cannot remember},
number = {5},
pages = {105},
publisher = {ACM},
title = {{Capturing, indexing, clustering, and retrieving system history}},
url = {http://portal.acm.org/citation.cfm?doid=1095809.1095821},
volume = {39},
year = {2005}
}
@article{sejits-graph-jpdc,
author = {Lugowski, Adam and Kamil, Shoaib and Bulu{\c{c}}, Ayd$\backslash$in and Williams, Samuel and Duriakova, Erika and Oliker, Leonid and Fox, Armando and Gilbert, John R},
journal = {Journal of Parallel and Distributed Computing},
pages = {115--131},
publisher = {Elsevier},
title = {{Parallel processing of filtered queries in attributed semantic graphs}},
volume = {79},
year = {2015}
}
@inproceedings{moocchat-cscw15,
abstract = {This research investigates how to introduce synchronous interactive peer learning into an online setting appropriate both for crowdworkers (learning new tasks) and students in massive online courses (learning course material). We present an interaction framework in which groups of learners are formed on demand and then proceed through a sequence of activities that include synchronous group discussion on learner-generated responses. Via controlled experiments with crowdworkers, we show that discussing challenging problems leads to better outcomes than working individually, and incentivizing people to help one another yields still better results. We then show that providing a mini-lesson in which workers consider the principles underlying the tested concept and justify their answers leads to further improvements. Combining the mini-lesson with the discussion of the multiple-choice question leads to significant improvements on that question. We also find positive subjective responses to the peer interactions, suggesting that discussions can improve morale in remote work or learning settings.
},
address = {Vancouver, Canada},
author = {Coetzee, D and Lim, Seongtaek and Fox, Armando and Hartmann, Bjoern and Hearst, Marti},
booktitle = {18th {\{}ACM{\}} Conference on Computer-Supported Collaborative Work ({\{}CSCW{\}} 2015)},
month = {mar},
title = {{Structuring Interactions for Large-Scale Synchronous Peer Learning}},
year = {2015}
}
@article{Morrison2011,
abstract = {It is important for students to be able to select and apply the appropriate data structure for the problem to be solved. Testing this knowledge on exams can be difficult, however. We examined 59 data structures final exams and found only 36 that contained questions involving the application of data structures. To promote assessment of this knowledge in the data structures course, we present a framework for classifying apply exam questions, with illustrations from the exams collected. We then show how a number of questions can be developed by varying a single rich apply question along the dimensions of this framework},
author = {Morrison, Briana B and Clancy, Mike and McCartney, Robert and Richards, Brad and Sanders, Kate},
doi = {10.1145/1953163.1953269},
file = {:private/tmp/Applying{\_}data{\_}structures{\_}in{\_}exams.pdf:pdf},
isbn = {1450305008},
journal = {Proceedings of the 42nd ACM technical symposium on Computer science education},
keywords = {apply,assessment,cs2,data structures,exams},
pages = {353--358},
title = {{Applying data structures in exams}},
year = {2011}
}
@inproceedings{ads_www9,
address = {Amsterdam, Netherlands},
author = {Huang, Andrew C and Ling, Benjamin C and Barton, John and Fox, Armando},
booktitle = {Ninth International World Wide Web Conference (WWW9)},
month = {may},
title = {{Running the {\{}W{\}}eb Backwards: {\{}A{\}}ppliance {\{}D{\}}ata {\{}S{\}}ervices}},
year = {2000}
}
@article{abovetheclouds-cacm,
author = {Armbrust, Michael and Fox, Armando and Griffith, Rean and Joseph, Anthony D and Katz, Randy and Konwinski, Andy and Lee, Gunho and Patterson, David and Rabkin, Ariel and Stoica, Ion and Zaharia, Matei},
journal = {Communications of the {\{}ACM{\}}},
month = {apr},
number = {4},
pages = {50--59},
title = {{Above the Clouds: A Berkeley View of Cloud Computing}},
volume = {53},
year = {2010}
}
@article{Candea2004,
abstract = {A significant fraction of software failures in large-scale Internet systems are cured by rebooting, even when the exact failure causes are unknown. However, rebooting can be expensive, causing nontrivial service disruption or downtime even when clusters and failover are employed. In this work we use separation of process recovery from data recovery to enable microrebooting - a fine-grain technique for surgically recovering faulty application components, without disturbing the rest of the application. We evaluate microrebooting in an Internet auction system running on an application server. Microreboots recover most of the same failures as full reboots, but do so an order of magnitude faster and result in an order of magnitude savings in lost work. This cheap form of recovery engenders a new approach to high availability: microreboots can be employed at the slightest hint of failure, prior to node failover in multi-node clusters, even when mistakes in failure detection are likely; failure and recovery can be masked from end users through transparent call-level retries; and systems can be rejuvenated by parts, without ever being shut down.},
author = {Candea, George and Kawamoto, Shinichi and Fujiki, Yuichi and Friedman, Greg and Fox, Armando},
file = {:Users/fox/Documents/fox/papers/mendeley/Candea et al. - 2004 - Microreboot – A Technique for Cheap Recovery.pdf:pdf},
journal = {Symposium A Quarterly Journal In Modern Foreign Literatures},
pages = {31--44},
title = {{Microreboot – A Technique for Cheap Recovery}},
url = {http://portal.acm.org/citation.cfm?id=1251254.1251257},
volume = {pp},
year = {2004}
}
@inproceedings{amiba-percom,
address = {Fort Worth, TX},
annote = {$\backslash$url{\{}http://iwork.stanford.edu/pubs/interop-percom.pdf{\}}},
author = {Ponnekanti, Shankar R and Fox, Armando},
booktitle = {IEEE International Conference on Pervasive Computing and Communications (Percom 2003)},
month = {mar},
title = {{Application Service Interoperation without Standardized Service Interfaces}},
year = {2003}
}
@unpublished{casefortacc,
annote = {Qualifying Exam Proposal, UC Berkeley Computer Science
Division. $\backslash$url{\{}http://www.cs.berkeley.edu/{\~{}}fox/papers/quals.ps{\}}},
author = {Fox, Armando},
month = {apr},
title = {{The {\{}C{\}}ase For {\{}TACC{\}}: {\{}S{\}}calable {\{}S{\}}ervers for {\{}T{\}}ransformation, {\{}A{\}}ggregation, {\{}C{\}}aching and {\{}C{\}}ustomization}},
year = {1997}
}
@inproceedings{Armbrust2010,
abstract = {Large-scale, user-facing applications are increasingly mov- ing from relational databases to distributed key/value stores for high-request-rate, low-latency workloads. Often, this move is motivated not only by key/value stores ability to scale simply by adding more hardware, but also by the easy to understand predictable performance they provide for all operations. For complex queries, this approach often re- quires onerous explicit index management and imperative data lookup by the developer. We propose PIQL, a Perfor- mance Insightful Query Language that allows developers to express many queries found on these websites while still pro- viding strict bounds on the number of I/O operations that will be performed.},
author = {Armbrust, Michael and Lanham, Nick and Tu, Stephen and Fox, Armando and Franklin, Michael J and Patterson, David A},
booktitle = {Proceedings of the 1st ACM symposium on Cloud computing},
file = {:Users/fox/Documents/fox/papers/mendeley/Armbrust et al. - 2010 - The case for PIQL a performance insightful query language.pdf:pdf},
pages = {131--136},
publisher = {ACM},
title = {{The case for PIQL: a performance insightful query language}},
url = {http://portal.acm.org/citation.cfm?id=1807149},
year = {2010}
}
@inproceedings{Ganapathi2009,
abstract = {One of the most challenging aspects of managing a very large data warehouse is identifying how queries will behave before they start executing. Yet knowing their performance characteristics their runtimes and resource usage can solve two important problems. First, every database vendor struggles with managing unexpectedly long-running queries. When these long-running queries can be identified before they start, they can be rejected or scheduled when they will not cause extreme resource contention for the other queries in the system. Second, deciding whether a system can complete a given workload in a given time period (or a bigger system is necessary) depends on knowing the resource requirements of the queries in that workload. We have developed a system that uses machine learning to accurately predict the performance metrics of database queries whose execution times range from milliseconds to hours. For training and testing our system, we used both real customer queries and queries generated from an extended set of TPC-DS templates. The extensions mimic queries that caused customer problems. We used these queries to compare how accurately different techniques predict metrics such as elapsed time, records used, disk I/Os, and message bytes. The most promising technique was not only the most accurate, but also predicted these metrics simultaneously and using only information available prior to query execution. We validated the accuracy of this machine learning technique on a number of HP Neoview configurations. We were able to predict individual query elapsed time within 20{\%} of its actual time for 85{\%} of the test queries. Most importantly, we were able to correctly identify both the short and long-running (up to two hour) queries to inform workload management and capacity planning.},
author = {Ganapathi, Archana and Kuno, Harumi and Dayal, Umeshwar and Wiener, Janet L and Fox, Armando and Jordan, Michael and Patterson, David},
booktitle = {2009 IEEE 25th International Conference on Data Engineering},
doi = {10.1109/ICDE.2009.130},
isbn = {9781424434220},
issn = {10844627},
pages = {592--603},
publisher = {IEEE},
title = {{Predicting Multiple Metrics for Queries: Better Decisions Enabled by Machine Learning}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4812438},
volume = {0},
year = {2009}
}
@inproceedings{amiba_mw,
author = {Ponnekanti, Shankar and Fox, Armando},
booktitle = {ACM/Usenix/IFIP Middleware'04},
title = {{Interoperability among Independently Evolving Web Services}},
url = {http://swig.stanford.edu/{~}pshankar/mw.pdf},
year = {2004}
}
@inproceedings{meetingmachine,
address = {Monterey, CA},
author = {Barton, John J and Hsieh, Tony and Vijayaraghavan, Vikram and Shimizu, Tomoto and Johanson, Brad and Fox, Armando},
booktitle = {Fifth IEEE Workshop on Mobile Computing Systems and Applications (WMCSA 2003)},
month = {oct},
title = {{The MeetingMachine: Interactive Workspace Support for Nomadic Users}},
year = {2003}
}
@techreport{Chen2010,
abstract = {Energy efficiency is a growing concern in modern datacenters. As Internet services increasingly rely on MapReduce workloads to fuel their flagship businesses, there is a growing need for better MapReduce energy efficency evaluation mechanisms. We present a statistics-driven workload generation framework that distills summary statistics from production MapReduce traces and realistically reproduces representative workloads. These workloads help us evaluate design decisions with regard to scale, configuration, scheduling, and other issues. We use this framework to identify specific suggestions to improve MapReduce energy efficiency. Our key finding is that evaluations using trace-driven workloads reverse current design priorities in optimizing for data intensive synthetic jobs.},
author = {Chen, Yanpei and Ganapathi, A S and Fox, Armando and Katz, R H and Patterson, D A},
booktitle = {Energy},
file = {:Users/fox/Documents/fox/papers/mendeley/Chen et al. - 2010 - Statistical Workloads for Energy Efficient MapReduce.pdf:pdf},
institution = {Technical Report UCB/EECS-2010-6, EECS Department, University of California, Berkeley},
number = {UCB/EECS-2010-6},
title = {{Statistical Workloads for Energy Efficient MapReduce}},
url = {http://www.eecs.berkeley.edu/Pubs/TechRpts/2010/EECS-2010-6.pdf},
year = {2010}
}
@techreport{carma:Demmel:EECS-2012-205,
abstract = {Communication-optimal algorithms are known for square matrix multiplication. Here, we obtain the first communication-optimal algorithm for all dimensions of rectan- gular matrices. Combining the dimension-splitting technique of Frigo, Leiserson, Prokop and Ramachandran (1999) with the recursive BFS/DFS approach of Ballard, Demmel, Holtz, Lipshitz and Schwartz (2012) allows for a communication-optimal as well as cache- and network-oblivious algorithm. Moreover, the implementation is simple: approximately 50 lines of code for the shared-memory version. Since the new algorithm minimizes communication across the network, between NUMA domains, and between levels of cache, it performs well in practice on both shared- and distributed-memory machines. We show significant speedups over existing parallel linear algebra libraries both on a 32-core shared-memory machine and on a distributed-memory supercomputer.},
author = {Demmel, James and Eliahu, David and Fox, Armando and Kamil, Shoaib Ashraf and Lipshitz, Benjamin and Schwartz, Oded and Spillinger, Omer},
institution = {EECS Department, University of California, Berkeley},
month = {oct},
number = {UCB/EECS-2012-205},
title = {{Communication-Optimal Parallel Recursive Rectangular Matrix Multiplication}},
url = {http://www.eecs.berkeley.edu/Pubs/TechRpts/2012/EECS-2012-205.html},
year = {2012}
}
@inproceedings{birsinger-blb-cloud,
author = {{Peter Birsinger Richard Xia}, Armando Fox},
booktitle = {2013 SIAM Conference on Computational Science and Engineering},
title = {{Bootstrapping Big Data in the Cloud}},
url = {http://meetings.siam.org/sess/dsp{\_}talk.cfm?p=54100},
year = {2013}
}
@inproceedings{clustering-style,
address = {Vancouver, Canada},
annote = {Short paper},
author = {Yin, HeZheng and Fox, Armando},
booktitle = {2nd ACM Conference on Learning at Scale},
month = {mar},
title = {{Clustering Student Programming Assignments to Multiply Instructor Leverage}},
url = {http://dx.doi.org/10.1145/2724660.2728695},
year = {2015}
}
@inproceedings{bodik:hiliter,
address = {San Diego, CA},
author = {Bodik, Peter and Goldszmidt, Moises and Fox, Armando},
booktitle = {Third Workshop on Tackling Computer Systems Problems with Machine Learning (SysML 2008)},
month = {dec},
title = {{HiLighter: Automatically Building Robust Signatures of Performance Behavior for Small- and Large-Scale Systems}},
year = {2008}
}
@article{patent-eventheap,
address = {US},
author = {E, JOHANSON BRADLEY and ARMANDO, F O X and A, WINOGRAD TERRY and M, HANRAHAN PATRICK},
isbn = {US 7702729 B2},
publisher = {JOHANSON BRADLEY E},
title = {{Event heap: a coordination infrastructure for dynamic heterogeneous application interactions in ubiquitous computing environments}},
url = {https://www.lens.org/lens/patent/US{\_}7702729{\_}B2},
year = {2010}
}
@article{Murphy-Hill2010,
author = {Murphy-Hill, E and Black, AP},
file = {:Users/fox/Documents/fox/papers/mendeley/Murphy-Hill, Black - 2010 - An interactive ambient visualization for code smells.pdf:pdf},
isbn = {9781450300285},
journal = {{\ldots} of the 5th international symposium on {\ldots}},
keywords = {code smells,refactoring,software,usability},
pages = {5--14},
title = {{An interactive ambient visualization for code smells}},
url = {http://dl.acm.org/citation.cfm?id=1879216},
year = {2010}
}
@article{diy-textbook-publishing,
address = {New York, NY, USA},
author = {Fox, Armando and Patterson, David},
doi = {10.1145/2656333},
issn = {0001-0782},
journal = {Commun. ACM},
month = {feb},
number = {2},
pages = {40--43},
publisher = {ACM},
title = {{Do-it-yourself Textbook Publishing}},
url = {http://doi.acm.org/10.1145/2656333},
volume = {58},
year = {2015}
}
@article{Dillenbourg1999,
annote = {Modified Roschelle {\&} Teasley def: "A situated, coordinated, synchronous activity that is result of a continued attempt to construct and maintain a shared conception of a problem." [situation, interaction, processes, effects]
"Two or more people learning something together". - Boundary between 'social' and 'cognitive' process elements is blurry. Many DoF, but in general:
- Small scale (3 vs 3000)
- "joint solving of a common problem/goal" concretizes the learning activity
- instructions to subjects, physical setting, constraints (eg how performance will be graded), and possibly scaffolding in the form of declarative rules such as "Everyone should speak up once" (vs method or script)
- collaborative = approx symmetry of participants' knowledge, standing, task types (vs. "cooperation" which is divide-and-conquer)
- negotiation (vs one participant imposing their view)
- generally synchronous communication (vs async)

"Internalization": transfer of tools from "social plane" to "inner/reasoning plane"
Should effects of CL be assessed on group members individually or the group as a whole?},
author = {Dillenbourg, P},
doi = {10.1.1.167.4896},
file = {:Users/fox/Documents/fox/papers/mendeley/Dillenbourg-Pierre-1999.pdf:pdf},
isbn = {0080430732},
issn = {08895406},
journal = {Collaborative-learning: Cognitive and Computational Approaches},
number = {1},
pages = {1--19},
pmid = {10842116},
title = {{What do you mean by 'collaborative learning'?}},
url = {https://telearn.archives-ouvertes.fr/hal-00190240/document},
year = {1999}
}
@inproceedings{candea:jagr,
address = {Seattle, WA},
author = {Candea, George and Keyani, Pedram and K$\backslash$ic$\backslash$iman, Emre and Zhang, Steve and Fox, Armando},
booktitle = {Proc.5thInternational Workshop on Active Middleware Services},
month = {jun},
title = {{{\{}JAGR{\}}: An Autonomous Self-Recovering Application Server}},
year = {2003}
}
@article{Ganapathi2009a,
author = {Ganapathi, Archana and Datta, Kaushik and Fox, Armando and Patterson, David},
journal = {Machine Learning},
pages = {1},
publisher = {USENIX Association},
title = {{A Case for Machine Learning to Optimize Multicore Performance}},
url = {http://portal.acm.org/citation.cfm?id=1855592},
year = {2009}
}
@article{Bodik2009,
abstract = {Horizontally scalable Internet services present an opportunity to use automatic resource allocation strategies for system manage- ment in the datacenter. In most of the previous work, a controller employs a performance model of the system to make decisions about the optimal allocation of resources. However, these mod- els are usually trained offline or on a small-scale deployment and will not accurately capture the performance of the controlled ap- plication. To achieve accurate control of the web application, the models need to be trained directly on the production system and adapted to changes in workload and performance of the application. In this paper we propose to train the performance model using an exploration policy that quickly collects data from different performance regimes of the application. The goal of our approach for managing the exploration process is to strike a balance between not violating the performance SLAs and the need to collect suffi- cient data to train an accurate performance model, which requires pushing the system close to its capacity. We show that by using our exploration policy, we can train a performance model of a Web 2.0 application in less than an hour and then immediately use the model in a resource allocation controller.},
author = {Bodik, Peter and Griffith, Rean and Sutton, Charles and Fox, Armando and Jordan, Michael I and Patterson, David A},
file = {:Users/fox/Documents/fox/papers/mendeley/Bodik et al. - 2009 - Automatic Exploration of Datacenter Performance Regimes.pdf:pdf},
journal = {Proceedings of the 1st workshop on Automated control for datacenters and clouds ACDC 09},
keywords = {learning,statistics {\&} optimisation},
pages = {1},
publisher = {ACM Press},
series = {ACDC '09},
title = {{Automatic Exploration of Datacenter Performance Regimes}},
url = {http://eprints.pascal-network.org/archive/00005809/},
year = {2009}
}
@techreport{kdt-techreport,
author = {Bulu{\c{c}}, Aydin and Fox, Armando and Gilbert, John and Kamil, Shoaib Ashraf and Lugowski, Adam and Oliker, Leonid and Williams, Samuel},
institution = {University of California, Berkeley},
number = {EECS-2012-61},
title = {{High-Performance Analysis of Filtered Semantic Graphs}},
url = {http://www.eecs.berkeley.edu/Pubs/TechRpts/2012/EECS-2012-61.html},
year = {2012}
}
@inproceedings{candea:RR,
address = {Elmau/Oberbayern, Germany},
author = {Candea, George and Fox, Armando},
booktitle = {Proc.8th {\{}W{\}}orkshop on {\{}H{\}}ot {\{}T{\}}opics in {\{}O{\}}perating {\{}S{\}}ystems},
month = {may},
pages = {110--115},
title = {{Recursive Restartability: Turning the Reboot Sledgehammer into a Scalpel}},
year = {2001}
}
@article{spoc,
annote = {As of January 2015, {\#}6 downloaded CACM Viewpoint article since January 2012, with over 44,000 downloads.},
author = {Fox, Armando},
journal = {Communications of the {\{}ACM{\}}},
month = {dec},
title = {{Viewpoint: From {\{}MOOC{\}}s to {\{}SPOC{\}}s: How {\{}MOOC{\}}s Can Strengthen Academia}},
url = {http://cacm.acm.org/magazines/2013/12/169931-from-moocs-to-spocs/abstract},
volume = {56},
year = {2013}
}
@misc{TheMendeleySupportTeam2011,
abstract = {A quick introduction to Mendeley. Learn how Mendeley creates your personal digital library, how to organize and annotate documents, how to collaborate and share with colleagues, and how to generate citations and bibliographies.},
address = {London},
author = {{The Mendeley Support Team}},
booktitle = {Mendeley Desktop},
file = {:Users/fox/Documents/fox/papers/mendeley/The Mendeley Support Team - 2011 - Getting Started with Mendeley.pdf:pdf},
keywords = {Mendeley,how-to,user manual},
pages = {1--16},
publisher = {Mendeley Ltd.},
title = {{Getting Started with Mendeley}},
url = {http://www.mendeley.com},
year = {2011}
}
@unpublished{glomop-www,
annote = {All documents archived at $\backslash$url{\{}http://github.com/armandofox/glomop{\}}},
author = {Et al., Eric A Brewer},
title = {{The GloMop Project (home page)}},
year = {1995}
}
@article{Blau2015,
abstract = {We created an Eclipse plug-in called FrenchPress that partially automates the task of giving students feedback on their Java programs. It is designed not for novices but for students taking their second or third Java course: students who know enough Java to write a working program but lack the judgment to recognize bad code when they see it. FrenchPress does not diagnose compile-time or runtime errors, or logical errors that produce incorrect output. It targets silent flaws, flaws the student is unable to identify for himself because nothing in the programming environment alerts him. FrenchPress diagnoses flaws characteristic of programmers who have not yet assimilated the object-oriented idiom. Such shortcomings include misuse of the public modifier, fields that should have been local variables, and instance variables that should have been class constants. Other rules address the all too common misunderstanding of the boolean datatype. FrenchPress delivers explanatory messages in a vocabulary appropriate to the student's current level. This paper reports preliminary results of a formative evaluation of FrenchPress conducted in a Fall 2014 data structures and algorithms course. User satisfaction survey responses indicate that among the students who received substantive diagnostic suggestions from FrenchPress, the percentage who were motivated to modify their program varied from 36{\%} to 64{\%} on four different assignments.},
author = {Blau, Hannah and Moss, J Eliot B},
doi = {10.1145/2729094.2742622},
file = {:Users/fox/Documents/fox/papers/mendeley/Blau, Moss - 2015 - FrenchPress Gives Students Automated Feedback on Java Program Flaws.pdf:pdf},
isbn = {9781450334402},
issn = {1942647X},
journal = {ITiCSE '15},
keywords = {Eclipse plug-in,educational technology,program analysis,static analysis},
pages = {15--20},
title = {{FrenchPress Gives Students Automated Feedback on Java Program Flaws}},
year = {2015}
}
@article{kf_ubicomp02,
author = {Kindberg, Tim and Fox, Armando},
journal = {IEEE Pervasive Computing},
title = {{System Software for Ubiquitous Computing}},
year = {2002}
}
@article{Fox2003,
abstract = {By embracing the inevitability of system failures, recovery-oriented computing returns service faster.},
author = {Fox, Armando and Patterson, David},
institution = {Stanford University, USA.},
journal = {Scientific American},
number = {6},
pages = {54--61},
pmid = {12764937},
title = {{Self-repairing computers.}},
url = {http://www.sciam.com/article.cfm?id=000DAA41-3B4E-1EB7-BDC0809EC588EEDF{\&}print=true},
volume = {288},
year = {2003}
}
@article{agile_sw_curriculum,
author = {Fox, Armando and Patterson, David A},
doi = {http://doi.ieeecomputersociety.org/10.1109/MS.2013.109},
journal = {{\{}IEEE{\}} Software},
number = {5},
pages = {84--88},
title = {{Is the new software engineering curriculum agile?}},
url = {http://www.computer.org/csdl/mags/so/2013/05/mso2013050088-abs.html},
volume = {30},
year = {2013}
}
@article{iroom,
author = {Fox, Armando and Johanson, Brad and Hanrahan, Pat and Winograd, Terry},
journal = {IEEE Computer Graphics and Applications},
number = {3},
pages = {54--65},
title = {{Integrating Information Appliances into an Interactive Workspace}},
volume = {20},
year = {2000}
}
@inproceedings{piql_precomputation_sigmod13,
address = {Scottsdale, {\{}AZ{\}}},
author = {Armbrust, Michael and Liang, Eric and Kraska, Tim and Fox, Armando and Franklin, Michael J and Patterson, David A},
booktitle = {{\{}ACM{\}} {\{}SIGMOD{\}} 2013},
title = {{Generalized Scale Independence Through Incremental Precomputation}},
year = {2013}
}
@proceedings{ccc-cra-mroe,
address = {Washington, {\{}DC{\}}},
editor = {Fisher, Douglas H and Fox, Armando},
month = {feb},
organization = {Computing Research Association},
title = {{{\{}CCC/CRA{\}} Workshop Report: Multidisciplinary Research in Online Education}},
year = {2013}
}
@article{Goldszmidt2005,
abstract = {Recent research activity 2, 12, 27, 10, 1 has shown encouraging results for performance debugging and failure diagnosis and detection in systems by using approaches based on automatically inducing models and deriving correlations from observed data. We believe that maximizing the potential of this line of research will require surmounting some fundamental challenges arising not from the modeling techniques themselves, but specifically from the application of those techniques to real-world systems. We specifically formulate three challenges. First, as new data is collected from a system, previously-induced models must be continuously assessed and validated, with the ultimate aim of achieving online adaption to system changes. Second, human operators must be able to effectively interact with the models, including interpreting model findings to generate explanations, enabling human feedback to improve the models, and identifying false positives and missed detections. Third, it should be possible to formally manipulate "signatures" of system state as represented by these models, allowing us to query the system's past to identify recurring problems and manually annotate them with additional information. We contend that the specifics of this problem domain not only raise these challenges, but also provide the knowledge base from which to derive well-engineered solutions to them. We suggest some possible strategies for addressing each challenge and show how they arise in the context of a real example.},
author = {Goldszmidt, Moises and Cohen, Ira and Fox, Armando and Zhang, Steve},
file = {:Users/fox/Documents/fox/papers/mendeley/Goldszmidt et al. - 2005 - Three research challenges at the intersection of machine learning , statistical induction , and systems.pdf:pdf},
journal = {Challenge},
pages = {10},
title = {{Three research challenges at the intersection of machine learning , statistical induction , and systems}},
url = {http://portal.acm.org/citation.cfm?id=1251133},
year = {2005}
}
@inproceedings{charon,
address = {Rye, NY},
author = {Fox, Armando and Gribble, Steven D},
booktitle = {Second ACM Conference on Mobile Computing and Networking (MobiCom 96)},
month = {nov},
title = {{Security {\{}O{\}}n the {\{}M{\}}ove: {\{}I{\}}ndirect {\{}A{\}}uthentication {\{}U{\}}sing {\{}K{\}}erberos}},
year = {1996}
}
@inproceedings{autostyle,
address = {Vancouver, Canada},
annote = {Short paper},
author = {Moghadam, Joseph and Choudhury, Rohan Roy and Yin, HeZheng and Fox, Armando},
booktitle = {2nd ACM Conference on Learning at Scale},
month = {mar},
title = {{{\{}A{\}}uto{\{}S{\}}tyle: Toward Coding Style Feedback At Scale}},
url = {http://dx.doi.org/10.1145/2724660.2728672},
year = {2015}
}
@inproceedings{johanson2001multibrowsing,
author = {Johanson, Brad and Ponnekanti, Shankar and Sengupta, Caesar and Fox, Armando},
booktitle = {Ubicomp 2001: Ubiquitous Computing},
organization = {Springer},
pages = {346--353},
title = {{Multibrowsing: Moving web content across multiple displays}},
year = {2001}
}
@article{Studies2002,
author = {Studies, Case and Patterson, David and Brown, Aaron and Broadwell, Pete and Candea, George and Chen, Mike and Cutler, James and Enriquez, Patricia and Fox, Armando and Kıcıman, Emre and Merzbacher, Matthew and Oppenheimer, David and Sastry, Naveen and Tetzlaff, William and Traupman, Jonathan and Treuhaft, Noah},
institution = {EECS Department, University of California, Berkeley},
journal = {Disasters},
number = {UCB//CSD-02-1175},
pages = {1--16},
publisher = {University of California at Berkeley},
title = {{Recovery Oriented Computing (ROC): Motivation, Definition, Techniques, and Case Studies}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.16.6351{\&}rep=rep1{\&}type=pdf},
year = {2002}
}
@unpublished{dolf,
annote = {Unpublished manuscript: CS 294-5 Digital Libraries
Seminar, Spring 1996},
author = {Fox, Armando and Gribble, Steven D},
title = {{{\{}DOLF{\}}: Digital Objects With Lazy Fixations}}
}
@unpublished{transend,
annote = {Free service deployed by UC Berkeley. See $\backslash$url{\{}http://transend.cs.berkeley.edu{\}}},
author = {Fox, Armando and Gribble, Steven D and Chawathe, Yatin and Brewer, Eric},
title = {{{\{}T{\}}ran{\{}S{\}}end {\{}W{\}}eb {\{}A{\}}ccelerator {\{}P{\}}roxy}},
year = {1997}
}
@techreport{Spillinger:EECS-2015-29,
abstract = {We present a machine learning technique for the algorithm selection problem, specifically focusing on algorithms for dense matrix multiplication. Dense matrix multiplication is a core component of many high-performance computing and machine learning algorithms, but the performance of matrix multiplication algorithms can vary significantly based on input parameters and hardware architecture. We build performance models for multiple machines using support vector machines (SVMs) and show that only a sparse exploration of the input space is sufficient to accurately predict the best choice of algorithm over a wide range of possible inputs. We find that by using this classifier-based approach to choose the best algorithm to use at runtime, we are able to achieve as much as a 26{\%} increase in average performance over choosing a single algorithm a priori. This is within 1.5{\%} of the performance possible with a perfect algorithm selector.},
author = {Spillinger, Omer and Eliahu, David and Fox, Armando and Demmel, James},
institution = {EECS Department, University of California, Berkeley},
month = {may},
number = {UCB/EECS-2015-29},
title = {{Matrix Multiplication Algorithm Selection with Support Vector Machines}},
url = {http://www.eecs.berkeley.edu/Pubs/TechRpts/2015/EECS-2015-29.html},
year = {2015}
}
@inproceedings{kandasamy:crowd,
author = {Kandasamy, Durga M and Curtis, Kristal and Fox, Armando and Patterson, David A},
booktitle = {CSCW (Companion)},
pages = {115--118},
title = {{Diversity within the crowd}},
year = {2012}
}
@article{crossing_the_software_chasm,
annote = {As of January 2015, {\#}1 downloaded CACM Viewpoint article since January 2012, with over 242,000 downloads, more than twice as many as the {\#}2 or {\#}3 article and more than four times as many as any other "top 10" Viewpoint download.},
author = {Fox, Armando and Patterson, David},
journal = {Communications of the {\{}ACM{\}}},
month = {may},
number = {5},
pages = {25--30},
title = {{Crossing the Software Education Chasm}},
volume = {55},
year = {2012}
}
@inproceedings{forum-cscw,
address = {Baltimore, MD},
author = {Coetzee, Derrick and Fox, Armando and Hearst, Marti A and Hartmann, Bjoern},
booktitle = {CSCW 2014},
month = {feb},
title = {{Should Your {\{}MOOC{\}} Forum Use a Reputation System?}},
year = {2014}
}
@unpublished{dispare,
annote = {Class project, CS433 High Performance Parallel Programming,
University of Illinois at Urbana-Champaign},
author = {Choquette, Jack and Fox, Armando and Shores, George},
month = {may},
title = {{User Manual for {\{}$\backslash$sc DisPare{\}}: Parallel Discrete Event Simulation on the Chare Kernel}},
year = {1991}
}
@article{Chen2004,
abstract = {We present a new approach to managing failures and evolution in large, complex distributed systems using runtime paths. We use the paths that requests follow as they move through the system as our core abstraction, and our "macro" approach focuses on component interactions rather than the details of the components themselves. Paths record component performance and interactions, are user- and request-centric, and occur in sufficient volume to enable statistical analysis, all in a way that is easily reusable across applications. Automated statistical analysis of multiple paths allows for the detection and diagnosis of complex failures and the assessment of evolution issues. In particular, our approach enables significantly stronger capabilities in failure detection, failure diagnosis, impact analysis, and understanding system evolution. We explore these capabilities with three real implementations, two of which service millions of requests per day. Our contributions include the approach; the maintainable, extensible, and reusable architecture; the various statistical analysis engines; and the discussion of our experience with a high-volume production service over several years.},
author = {Chen, Mike Y and Accardi, Anthony and Kıcıman, Emre and Lloyd, Jim and Patterson, Dave and Fox, Armando and Brewer, Eric and Berkeley, U C and Networks, Tellme},
journal = {Proceedings of the},
pages = {23--23},
publisher = {USENIX Association},
title = {{Path-Based Failure and Evolution Management}},
url = {http://portal.acm.org/citation.cfm?id=1251175.1251198},
year = {2004}
}
@inproceedings{cook:gmm-hotpar-2011,
address = {Berkeley, CA},
author = {Cook, H and Gonina, E and Kamil, S and Friedland, G and Patterson, D and Fox, A},
booktitle = {2011 Workshop on Hot Topics in Parallelim ({\{}HotPar{\}} 2011)},
month = {may},
title = {{{\{}CUDA{\}}-level Performance with {\{}Python{\}}-level Productivity for Gaussian Mixture Model Applications}},
year = {2011}
}
@article{Bodik2009a,
abstract = {Horizontally-scalable Internet services on clusters of commodity computers appear to be a great fit for automatic control: there is a target output (service-level agreement), observed output (actual latency), and gain controller (adjusting the number of servers). Yet few datacenters are automated this way in practice, due in part to well-founded skepticism about whether the sim- ple models often used in the research literature can cap- ture complex real-life workload/performance relationships and keep up with changing conditions that might invalidate the models. We argue that these shortcomings can be fixed by importing modeling, control, and anal- ysis techniques from statistics and machine learning. In particular, we apply rich statistical models of the applica- tions performance, simulation-based methods for find- ing an optimal control policy, and change-point methods to find abrupt changes in performance. Preliminary re- sults running a Web 2.0 benchmark application driven by real workload traces on Amazons EC2 cloud show that our method can effectively control the number of servers, even in the face of performance anomalies.},
author = {Bodik, Peter and Griffith, Rean and Sutton, Charles and Fox, Armando and Jordan, Michael I and Patterson, David A},
file = {:Users/fox/Documents/fox/papers/mendeley/Bodik et al. - 2009 - Statistical Machine Learning Makes Automatic Control Practical for Internet Datacenters.pdf:pdf},
journal = {HotCloud},
keywords = {learning,statistics {\&} optimisation},
pages = {12--12},
publisher = {USENIX Association},
series = {HotCloud'09},
title = {{Statistical Machine Learning Makes Automatic Control Practical for Internet Datacenters}},
url = {http://eprints.pascal-network.org/archive/00005808/},
year = {2009}
}
@techreport{patterson:roc_tr,
address = {Berkeley, CA},
author = {Patterson, D and Brown, A and Broadwell, P and Candea, G and Chen, M and Cutler, J and Enriquez, P and Fox, A and K$\backslash$ic$\backslash$iman, E and Merzbacher, M and Oppenheimer, D and Sastry, N and Tetzlaff, W and Treuhaft, N},
institution = {UC Berkeley},
month = {mar},
number = {UCB/CSD-02-1175},
title = {{Recovery Oriented Computing ({\{}ROC{\}}): Motivation, Definition, Techniques, and Case Studies}},
year = {2002}
}
@proceedings{hotos09,
address = {Berkeley, CA},
editor = {Fox, Armando},
month = {may},
publisher = {Usenix},
title = {{{\{}H{\}}ot{\{}OS{\}}-{\{}IX{\}}: 9th {\{}USENIX{\}} Workshop on Hot Topics in Operating Systems}},
year = {2009}
}
@techreport{Armbrust2009b,
abstract = {(from executive summary) Cloud Computing, the long-held dream of computing as a utility, has the potential to transform a large part of theIT industry, making software even more attractive as a service and shaping the way IT hardware is designed andpurchased. Developers with innovative ideas for new Internet services no longer require the large capital outlaysin hardware to deploy their service or the human expense to operate it. They need not be concerned about overprovisioningfor a service whose popularity does not meet their predictions, thus wasting costly resources, or underprovisioningfor one that becomes wildly popular, thus missing potential customers and revenue. Moreover, companieswith large batch-oriented tasks can get results as quickly as their programs can scale, since using 1000 servers for onehour costs no more than using one server for 1000 hours. This elasticity of resources, without paying a premium forlarge scale, is unprecedented in the history of IT.},
author = {Armbrust, Michael and Fox, Armando and Griffith, Rean and Joseph, Anthony D and Katz, Randy H and Konwinski, Andrew and Lee, Gunho and Patterson, David A and Rabkin, Ariel and Stoica, Ion and Zaharia, Matei},
booktitle = {EECS Department University of California Berkeley Tech Rep UCBEECS200928},
institution = {University of California at Berkeley},
number = {UCB/EECS-2009-28},
pages = {25},
publisher = {Citeseer},
title = {{Above the Clouds: A Berkeley View of Cloud Computing}},
url = {http://www.eecs.berkeley.edu/Pubs/TechRpts/2009/EECS-2009-28.pdf},
year = {2009}
}
@inproceedings{rabkin:graphical,
address = {Vancouver, BC},
author = {Rabkin, Ariel and Xu, Wei and Wildani, Avani and Fox, Armando and Patterson, David and Katz, Randy},
booktitle = {Workshop on Managing Systems via Log Analysis and Machine Learning (SLAML 2010)},
month = {oct},
title = {{A Graphical Representation for Identifier Structure in Logs}},
year = {2010}
}
@inproceedings{candea:urb,
address = {San Francisco, CA},
author = {Candea, George and Kawamoto, Shinichi and Fujiki, Yuichi and Friedman, Greg and Fox, Armando},
booktitle = {Proc. 6th {\{}USENIX{\}} {\{}S{\}}ymposium on {\{}O{\}}perating {\{}S{\}}ystems {\{}D{\}}esign and {\{}I{\}}mplementation (OSDI '04)},
month = {dec},
title = {{Microreboot---A Technique For Cheap Recovery}},
year = {2004}
}
@inproceedings{slic:hotos05,
address = {Santa Fe, NM},
author = {Goldszmidt, Moises and Cohen, Ira and Zhang, Steve and Fox, Armando},
booktitle = {Proc. Tenth Workshop on Hot Topics in Operating Systems (HotOS-X)},
month = {jun},
title = {{Three Research Challenges at the Intersection of Machine Learning, Statistical Inference, and Systems}},
year = {2005}
}
@inproceedings{carma,
address = {Boston, {\{}MA{\}}},
author = {Demmel, James and Eliahu, David and Fox, Armando and Kamil, Shoaib Ashraf and Lipshitz, Benjamin and Schwartz, Oded and Spillinger, Omer},
booktitle = {Proceedings of the 25th {\{}IEEE{\}} {\{}I{\}}nternational {\{}P{\}}arallel and {\{}D{\}}istributed {\{}P{\}}rocessing {\{}S{\}}ymposium (IPDPS'13)},
month = {may},
publisher = {{\{}IEEE{\}} {\{}C{\}}omputer {\{}S{\}}ociety},
title = {{Communication-Optimal Parallel Recursive Rectangular Matrix Multiplication}},
year = {2013}
}
@inproceedings{bodik:icac05,
address = {Seattle, WA},
author = {Bod{\'{i}}k, Peter and Friedman, Greg and Biewald, Lukas and Levine, Helen and Candea, George and Fox, Armando and Jordan, Michael I and Patterson, David and Patel, Kayur and Tolle, Gilman and Hui, Jonathan},
booktitle = {Proc. 2nd International Conference on Autonomic Computing (ICAC'05)},
title = {{Combining Visualization and Statistical Analysis to Improve Operator Confidence and Efficiency for Failure Detection and Localization}},
year = {2005}
}
@inproceedings{Catanzaro2009,
abstract = {Todays high productivity programming languages such as Python lack the performance of harder-to-program efficiency languages (CUDA, Cilk, C with OpenMP) that can exploit extensive programmer knowledge of parallel hardware architectures. We combine efficiency-language performance with productivity-language programmability using selective embedded just-in-time specialization (SEJITS). At runtime, we specialize (generate, compile, and execute efficiency-language source code for) an application-specific and platform-specific subset of a productivity language, largely invisibly to the application programmer. Because the specialization machinery is implemented in the productivity language itself, it is easy for efficiency programmers to incrementally add specializers for new domain abstractions, new hardware, or both. SEJITS has the potential to bridge productivity-layer research and efficiency-layer research, allowing domain experts to exploit different parallel hardware architectures with a fraction of the programmer time and effort usually required.},
author = {Catanzaro, B and Kamil, S and Lee, Y and Asanovic, K and Demmel, J and Keutzer, K and Shalf, J and Yelick, K and Fox, Armando},
booktitle = {Proc of 1st Workshop Programmable Models for Emerging Architecture PMEA},
number = {UCB/EECS-2010-23},
organization = {EECS Department, University of California, Berkeley},
pmid = {8401072916273492945},
publisher = {Citeseer},
title = {{SEJITS: Getting Productivity and Performance With Selective Embedded JIT Specialization}},
url = {http://www.eecs.berkeley.edu/{~}krste/papers/SEJITS-pmea2009.pdf},
year = {2009}
}
@inproceedings{ads_mobicom01,
address = {Rome, Italy},
author = {Huang, Andrew C and Ling, Benjamin C and Barton, John and Fox, Armando},
booktitle = {Seventh ACM Conference on Mobile Computing and Networking (MobiCom 2001)},
month = {jul},
title = {{Making Computers Disappear: Appliance Data Services}},
year = {2001}
}
@article{nae:cloud,
author = {Fox, Armando},
journal = {The {\{}BRIDGE{\}}},
number = {4},
pages = {5--12},
title = {{Opportunities and Challenges of Cloud Computing}},
volume = {40},
year = {2010}
}
@article{Trushkowsky2011,
abstract = {Elasticity of cloud computing environments provides an economic incentive for automatic resource allocation of stateful systems running in the cloud. However, these systems have to meet strict performance Service-Level Objectives (SLOs) expressed using upper percentiles of request latency, such as the 99th. Such latency measurements are very noisy, which complicates the design of the dynamic resource allocation. We design and evaluate the SCADS Director, a control framework that reconfigures the storage system on-the-fly in response to workload changes using a performance model of the system. We demonstrate that such a framework can respond to both unexpected data hotspots and diurnal workload patterns without violating strict performance SLOs.},
author = {Trushkowsky, Beth and Bod, Peter and Fox, Armando and Franklin, Michael J and Jordan, Michael I and Patterson, David A},
journal = {Compute},
pages = {163--176},
publisher = {USENIX Association},
title = {{The SCADS Director : Scaling a Distributed Storage System Under Stringent Performance Requirements}},
url = {http://www.eecs.berkeley.edu/{~}franklin/Papers/fast11director.pdf},
year = {2011}
}
@article{Huang2004,
abstract = {Cluster hash tables (CHTs) are a key persistent-storage component of many large-scale Internet services due to their high performance and scalability. We show that a correctly-designed CHT can also be as easy to manage as a farm of stateless servers. Specifically, we trade away some consistency to obtain reboot-based recovery that is simple, maintains full data availability, and only has modest impact on performance. This simplifies management in two ways. First, it simplifies failure detection by lowering the cost of acting on false positives, allowing us to use simple but aggressive statistical techniques to quickly detect potential failures and node degradations; even when a false alarm is raised or when rebooting will not fix the problem, attempting recovery by rebooting is relatively non-intrusive to system availability and performance. Second, it allows us to re-cast online repartitioning as failure plus recovery, simplifying dynamic scaling and capacity planning. These properties make it possible for the system to be continuously self-adjusting, a key property of self-managing, autonomic systems.},
author = {Huang, Andrew C and Fox, Armando},
file = {:Users/fox/Documents/fox/papers/mendeley/Huang, Fox - 2004 - Cheap Recovery A Key to Self-Managing State.pdf:pdf},
journal = {Trans Storage},
number = {1},
pages = {38--70},
publisher = {ACM},
title = {{Cheap Recovery: A Key to Self-Managing State}},
url = {http://arxiv.org/abs/cs/0406046},
volume = {1},
year = {2004}
}
@inproceedings{sejits-scipy2011,
address = {Austin, TX},
author = {Kamil, Shoaib and Coetzee, Derrick and Fox, Armando},
booktitle = {10th Python in Science Conference (SciPy 2011)},
month = {jul},
title = {{Bringing Parallel Performance to Python with Domain-Specific Selective Embedded Just-in-Time Specialization}},
year = {2011}
}
@inproceedings{asplos-distillation,
address = {Cambridge MA},
author = {Fox, Armando and Gribble, Steven D and Brewer, Eric A and Amir, Elan},
booktitle = {Proc.7th{\{}I{\}}nternational {\{}C{\}}onference on {\{}A{\}}rchitectural {\{}S{\}}upport for {\{}P{\}}rogramming {\{}L{\}}anguages and {\{}O{\}}perating {\{}S{\}}ystems},
month = {oct},
title = {{Adapting to {\{}N{\}}etwork and {\{}C{\}}lient {\{}V{\}}ariability via {\{}O{\}}n-{\{}D{\}}emand {\{}D{\}}ynamic {\{}D{\}}istillation}},
year = {1996}
}
@proceedings{mobisys03,
booktitle = {MobiSys},
publisher = {USENIX},
title = {{Proceedings of the First International Conference on Mobile Systems, Applications, and Services (MobiSys 2003), San Francisco, CA, USA}},
year = {2003}
}
@techreport{moocs-spocs-TR,
abstract = {This paper describes our experience in trying to transfer our re-vised software engineering curriculum from UC Berkeley to other universities. We were in the first wave of Massive Open Online Course (MOOCs), and this paper lists the lessons learned about educational technology transfer from developing MOOCs. To make it easier for instructors to use MOOC material, EdX offers Small Private Online Course (SPOCs), a term that we coined.},
author = {Fox, Armando and Patterson, David A and Ilson, Richard and Joseph, Samuel and Walcott-Justice, Kristen and Williams, Rose},
institution = {{\{}EECS{\}} Department, University of California, Berkeley},
month = {mar},
number = {UCB/EECS-2014-17},
title = {{Software Engineering Curriculum Technology Transfer: Lessons learned from {\{}MOOCs{\}} and {\{}SPOCs{\}}}},
url = {http://www.eecs.berkeley.edu/Pubs/TechRpts/2014/EECS-2014-17.html},
year = {2014}
}
@phdthesis{fox_thesis,
author = {Fox, Armando},
month = {dec},
school = {University of California at Berkeley},
title = {{A Framework For Separating Server Scalability and Availability From Internet Application Functionality}},
year = {1998}
}
@inproceedings{candea:afpi,
address = {San Jose, CA},
author = {Candea, George and Delgado, Mauricio and Chen, Michael and Fox, Armando},
booktitle = {Proc.3rd {\{}IEEE{\}} {\{}W{\}}orkshop on {\{}I{\}}nternet {\{}A{\}}pplications},
title = {{Automatic Failure-Path Inference: A Generic Introspection Technique for Software Systems}},
year = {2003}
}
@inproceedings{iros-percom03,
address = {Dallas-Ft. Worth, TX},
author = {Ponnekanti, Shankar R and Johanson, Brad and K$\backslash$ic$\backslash$iman, Emre and Fox, Armando},
booktitle = {IEEE Percom 2003)},
month = {mar},
title = {{Portability, Extensibility and Robustness in iROS}},
year = {2003}
}
@inproceedings{sosp16,
address = {Saint-Malo, France},
author = {Fox, Armando and Gribble, Steven D and Chawathe, Yatin and Brewer, Eric A and Gauthier, Paul},
booktitle = {Proc.16th{\{}ACM{\}} {\{}S{\}}ymposium on {\{}O{\}}perating {\{}S{\}}ystems {\{}P{\}}rinciples},
month = {oct},
pages = {78--91},
title = {{Cluster-{\{}B{\}}ased {\{}S{\}}calable {\{}N{\}}etwork {\{}S{\}}ervices}},
year = {1997}
}
@article{Xu2008,
abstract = {The console logs generated by an application contain messages that the application developers believed would be useful in de- bugging ormonitoring the application. Despite the ubiquity and large size of these logs, they are rarely exploited in a systematic way for monitoring and debugging because they are not read- ily machine-parsable. In this paper, we propose a novel method for mining this rich source of information. First, we combine log parsing and text mining with source code analysis to ex- tract structure from the console logs. Second, we extract fea- tures from the structured information in order to detect anoma- lous patterns in the logs using Principal Component Analysis (PCA). Finally, we use a decision tree to distill the results of PCA-based anomaly detection to a format readily understand- able by domain experts (e.g. system operators) who need not be familiar with the anomaly detection algorithms. As a case study, we distill over one million lines of console logs from the Hadoop file system to a simple decision tree that a domain ex- pert can readily understand; the process requires no operator intervention and we detect a large portion of runtime anomalies that are commonly overlooked.},
author = {Xu, Wei and Huang, L and Fox, Armando and Patterson, David and Jordan, Michael},
journal = {Workshop on Tackling Computer Problems with Machine Learning Techniques SysML San Diego CA},
pages = {4},
publisher = {USENIX Association},
title = {{Mining console logs for large-scale system problem detection}},
url = {http://www.usenix.org/events/sysml08/tech/full{\_}papers/xu/xu{\_}html/},
year = {2008}
}
@inproceedings{ling:ams03,
address = {Seattle, WA},
author = {Ling, Benjamin C and Fox, Armando},
booktitle = {5th Annual Workshop On Active Middleware Services},
title = {{A Self-Tuning, Self-Protecting, Self-Healing Session State Management Layer}},
year = {2003}
}
@inproceedings{icrafter,
author = {Ponnekanti, Shankar R and Lee, Brian and Fox, Armando and Hanrahan, Pat and Winograd, Terry},
booktitle = {Ubicomp 2001: Ubiquitous Computing},
organization = {Springer},
pages = {56--75},
title = {{ICrafter: A Service Framework for Ubiquitous Computing Environments}},
year = {2001}
}
@inproceedings{bodik:eurosys10,
address = {Paris, France},
author = {Bodik, Peter and Goldszmidt, Moises and Woodard, Dawn and Andersen, Hans and Fox, Armando},
booktitle = {SIGOPS European Conference on Computer Systems (EuroSys)},
month = {apr},
title = {{Fingerprinting the Datacenter: Automated Classification of Performance Crises}},
year = {2010}
}
@inproceedings{ganapathi:hotpar09,
address = {Berkeley, CA},
author = {Ganapathi, Archana and Datta, Kaushik and Fox, Armando and Patterson, David},
booktitle = {1st Workshop on Hot Topics in Parallelism (HotPar 2009)},
month = {mar},
title = {{Using Machine Learning to Auto-tune a Stencil Code on a Multicore Architecture}},
year = {2009}
}
@inproceedings{eheapwmcsa,
address = {Callicoon, NY},
author = {Johanson, Brad and Fox, Armando},
booktitle = {Fourth IEEE Workshop on Mobile Computing Systems and Applications (WMCSA 02)},
month = {jun},
title = {{The Event Heap: A Coordination Infrastructure For Interactive Workspaces}},
year = {2002}
}
@article{Lim,
author = {Lim, Jin-su and Ji, Jeong-hoon and Lee, Yun-jung and Woo, Gyun},
file = {:Users/fox/Documents/fox/papers/mendeley/Lim et al. - Unknown - Style Avatar a Visualization System for Teaching C Coding Style.pdf:pdf},
isbn = {9781450301138},
keywords = {code,coding standard,facial images,visualization},
pages = {1210--1211},
title = {{Style Avatar : a Visualization System for Teaching C Coding Style}}
}
@techreport{Stephens:EECS-2013-141,
abstract = {Network traces are a useful tool in understanding how users navigate the web.
Knowing the sequence of pages that led a user to arrive at a malicious website can help researchers develop techniques to prevent users from reaching such sites. Nevertheless, inferring sound causation between HTTP requests is a challenging task. Previous work often inferred these relationships without proper calibration. We present here methods for and considerations when inferring causation relationships between HTTP requests. We also introduce causation trees and terminology needed to model causal relationships between HTTP requests. Finally, we describe Gretel, our system that infers causation relationships, how we calibrated it, and our results on a sample control data set where ground truth was available.},
author = {Stephens, Kristin},
institution = {EECS Department, University of California, Berkeley},
month = {aug},
number = {UCB/EECS-2013-141},
title = {{Towards Sound HTTP Request Causation Inference}},
url = {http://www.eecs.berkeley.edu/Pubs/TechRpts/2013/EECS-2013-141.html},
year = {2013}
}
@inproceedings{candea:QAPSL,
address = {Saint-{\'{E}}milion, France},
author = {Candea, George and Fox, Armando},
booktitle = {Proceedings of the 10th ACM SIGOPS European Workshop},
month = {sep},
pages = {213--218},
title = {{A Utility-Centered Approach to Building Dependable Infrastructure Services}},
year = {2002}
}
@inproceedings{rag-autograder,
address = {Toledo, Spain},
author = {Fox, Armando and Patterson, David and Joseph, Samuel and McCulloch, Paul},
booktitle = {{\{}CHANGEE{\}} (Facing the challenges of assessing 21st century skills in the newly emerging educational ecosystem) workshop at {\{}EC-TEL{\}} 2015},
month = {sep},
title = {{{\{}MAGIC{\}}: Massive Automated Grading in the Cloud}},
year = {2015}
}
@article{Vakilian2014,
abstract = {Modern Integrated Development Environments (IDEs) sup- port many refactorings. Yet, programmers greatly under- use automated refactorings. Recent studies have applied traditional usability testing methodologies such as surveys, lab studies, and interviews to nd the usability problems of refactoring tools. However, these methodologies are expen- sive and can only identify certain kinds of usability problems. The critical incident technique (CIT) is a general methodol- ogy that uncovers usability problems by analyzing troubling user interactions. We derive a method from CIT, arguing that alternate refactoring paths are indicators of the usabil- ity problems of refactoring tools. We de ne an alternate refactoring path as a user interaction path that contains cancellations, reported messages, or repeated invocations of the refactoring tool. We evaluated our method on a large corpus of refactoring usage data, which we collected during a eld study on 36 programmers over three months. This method revealed 15 usability problems, 13 of which were previously unknown. We reported these problems and pro- posed design improvements to Eclipse developers. The de- velopers acknowledged all of the problems and have already xed four of them. This result suggests that analyzing alter- nate paths is e ective at discovering the usability problems of interactive program transformation (IPT) tools.},
author = {Vakilian, Mohsen and Johnson, Ralph E},
doi = {10.1145/2568225.2568282},
file = {:Users/fox/Documents/fox/papers/mendeley/Vakilian, Johnson - 2014 - Alternate Refactoring Paths Reveal Usability Problems.pdf:pdf},
isbn = {9781450327565},
journal = {36th International Conference on Software Engineering (ICSE 2014)},
keywords = {critical incident,empirical,evaluation,refactoring,usability},
pages = {1106--1116},
title = {{Alternate Refactoring Paths Reveal Usability Problems}},
year = {2014}
}
@inproceedings{icrafter2go,
address = {Callicoon, NY},
author = {Ponnekanti, Shankar R and Robles, Luis Alberto and Fox, Armando},
booktitle = {IEEE WMCSA 02},
month = {jun},
title = {{User Interfaces for Network Services: What, from Where, and How}},
year = {2002}
}
@inproceedings{xu:sosp09,
address = {Big Sky, Montana},
author = {Xu, Wei and Huang, Ling and Fox, Armando and Patterson, David and Jordan, Michael},
booktitle = {22nd ACM Symposium on Operating Systems Principles (SOSP 2009)},
month = {oct},
title = {{Large-Scale System Problem Detection by Mining Console Logs}},
year = {2009}
}
@inproceedings{slic:dsn,
address = {Yokohama, Japan},
author = {Zhang, Steve and Cohen, Ira and Goldszmidt, Moises and Symons, Julie and Fox, Armando},
booktitle = {2005 Intl. Conf. on Dependable Systems and Networks (DSN 2005)},
month = {jun},
title = {{Ensembles of Models for Automated Diagnosis of System Performance Problems}},
year = {2005}
}
@article{Ling2004,
abstract = {SSM manages user-session state, which exhibits the same manageability properties as stateless or soft-state nodes while providing firm storage guarantees. Basically, writes are performed to many waiting for a few to reply; reads are sent to many waiting for only one to reply. The client stub maintains a sending window for each brick using additive-increase, multiplicative-decrease (AIMD) to determine maximum capacity and for admission control. On failure, simple restart is enough, because session data is replicated multiple times and each write re-creates WQ copies. SSM combined with PinPoint provides self-healing. Integrating SSM with an application imposes a 25 percent throughput overhead.},
author = {Ling, Benjamin C and Kiciman, Emre and Fox, Armando},
journal = {Solutions},
pages = {22--22},
publisher = {USENIX Association},
title = {{Session State : Beyond Soft State}},
url = {http://portal.acm.org/citation.cfm?id=1251197},
year = {2004}
}
@inproceedings{ads_ubitools01,
address = {Atlanta, Georgia},
author = {Huang, Andrew C and Ling, Benjamin C and Fox, Armando},
booktitle = {Workshop on Application Models and Programming Tools for Ubiquitous Computing (Ubitools 2001)},
month = {sep},
title = {{What is Appliance Computing?}},
year = {2001}
}
@article{Kurkovsky2014,
author = {Kurkovsky, Stan},
file = {:Users/fox/Documents/fox/papers/mendeley/Kurkovsky - 2014 - A LEGO-based Approach to Introducing Test-Driven Development.pdf:pdf},
isbn = {9781450342315},
keywords = {active learning,lego,refactoring,software engineering,test-driven development},
pages = {246--247},
title = {{A LEGO-based Approach to Introducing Test-Driven Development}},
year = {2014}
}
@unpublished{infopad-devenv,
annote = {Infopad internal memo UC Berkeley Computer Science Division},
author = {Fox, Armando},
month = {dec},
title = {{Toward a Development Environment for the Berkeley Infopad}},
year = {1994}
}
@inproceedings{rads-position,
address = {Newport Beach, CA},
author = {Fox, Armando and K$\backslash$ic$\backslash$iman, Emre and Patterson, David and Katz, Randy and Stoica, Ion and Jordan, Michael I},
booktitle = {2004 ACM SIGSOFT Workshop on Self-managed Systems (WOSS'04)},
month = {oct},
title = {{Combining Statistical Monitoring and Predictable Recovery for Self-Management}},
year = {2004}
}
@inproceedings{paths_huc2000,
author = {K$\backslash$ic$\backslash$iman, Emre and Fox, Armando},
booktitle = {Handheld and Ubiquitous Computing (HUC 2000), First International Symposium},
month = {sep},
title = {{Using Dynamic Mediation to Integrate {\{}COTS{\}} Entities in a Ubiquitous Computing Environment}},
year = {2000}
}
@incollection{autostyle-its2016-bookchapter,
author = {Choudhury, Rohan Roy and Yin, HeZheng and Fox, Armando},
booktitle = {Intelligent Tutoring Systems},
editor = {Micarelli, Alessandro and Stamper, John and Panourgia, Kitty},
isbn = {ISBN 978-3-319-39583-8},
publisher = {Springer},
title = {{Scale-Driven Automatic Hint Generation for Coding Style}},
year = {2016}
}
@article{Brandt2009,
abstract = {This paper investigates the role of online resources in problem solving. We look specifically at how programmers - an exemplar form of knowledge workers - opportunistically interleave Web foraging, learning, and writing code. We describe two studies of how programmers use online resources. The first, conducted in the lab, observed participants' Web use while building an online chat room. We found that programmers leverage online resources with a range of intentions: They engage in just-in-time learning of new skills and approaches, clarify and extend their existing knowledge, and remind themselves of details deemed not worth remembering. The results also suggest that queries for different purposes have different styles and durations. Do programmers' queries "in the wild" have the same range of intentions, or is this result an artifact of the particular lab setting? We analyzed a month of queries to an online programming portal, examining the lexical structure, refinements made, and result pages visited. Here we also saw traits that suggest the Web is being used for learning and reminding. These results contribute to a theory of online resource usage in programming, and suggest opportunities for tools to facilitate online knowledge work.},
annote = {Each of 20 participants (experienced student programmers; little professional experience) spent {\~{}}19{\%} of programming task time doing Web searches while programming: learning, reference, clarification. The first is about learning new concept, including code snippets, can take 10s minutes; others are recalling details, clarification, or debugging for already-known concept, 10s seconds-few minutes. Approx 1/3 of finished code per participant had been copy-pasted from Web examples/tutorials, and that code is rarely tested at copy-paste time,making some bugs hard to find. A second study using posts on Adobe developer forum found that query content (code, naturla language, both) mostly predicts which type of activity.},
author = {Brandt, Joel and Guo, Philip J and Lewenstein, Joel and Dontcheva, Mira and Klemmer, Scott R and Francisco, San},
doi = {10.1145/1518701.1518944},
file = {:Users/fox/Documents/fox/papers/mendeley/Brandt et al. - 2009 - Two Studies of Opportunistic Programming Interleaving Web Foraging, Learning, and Writing Code.pdf:pdf},
isbn = {9781605582467},
journal = {ACM Conference on Human Factors in Computing Systems},
keywords = {World,opportunistic programming,problem solving},
pages = {1589--1598},
title = {{Two Studies of Opportunistic Programming: Interleaving Web Foraging, Learning, and Writing Code}},
year = {2009}
}
@inproceedings{piql:socc10,
address = {Indianapolis, IN},
author = {Armbrust, Michael and Lanham, Nick and Tu, Stephen and Fox, Armando and Franklin, Michael J and Patterson, David A},
booktitle = {First {\{}ACM{\}} Symposium on Cloud Computing (SOCC 2010)},
month = {jun},
title = {{The Case For {\{}PIQL{\}}: A Performance Insightful Query Language}},
year = {2010}
}
@techreport{tr:rain,
address = {Berkeley, CA},
author = {Beitch, Aaron and Liu, Brandon and Yung, Timothy and Griffith, Rean and Fox, Armando and Patterson, David A},
institution = {University of California, Berkeley},
month = {feb},
number = {{\{}EECS{\}}-2010-14},
title = {{Rain: A Workload Generation Toolkit for Cloud Computing Applications}},
year = {2010}
}
@article{Xu2009,
author = {Xu, Wei and Huang, Ling and Fox, Armando and Patterson, David and Jordan, Michael},
doi = {10.1109/ICDM.2009.19},
isbn = {9781424452422},
journal = {2009 Ninth IEEE International Conference on Data Mining},
pages = {588--597},
publisher = {Ieee},
title = {{Online System Problem Detection by Mining Patterns of Console Logs}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5360285},
year = {2009}
}
@inproceedings{chen:macroanalysis,
address = {Lihue, HI},
author = {Chen, Mike and K$\backslash$ic$\backslash$iman, Emre and Accardi, Anthony and Fox, Armando and Brewer, Eric},
booktitle = {Proc.9th {\{}W{\}}orkshop on {\{}H{\}}ot {\{}T{\}}opics in {\{}O{\}}perating {\{}S{\}}ystems},
title = {{Using Runtime Paths for Macro Analysis}},
year = {2003}
}
@article{Farrell2013,
annote = {Excellent related work section discussing various p},
author = {Farrell, V and Farrell, Graham and Kindler, Paul},
file = {:Users/fox/Documents/fox/papers/mendeley/Farrell, Farrell, Kindler - 2013 - Capstone project online assessment tool without the paper work.pdf:pdf},
isbn = {9781450320788},
journal = {Proceedings of the 18th {\ldots}},
keywords = {assessment,capstone,group,it,peer,project,tcs,team},
pages = {201--206},
title = {{Capstone project online assessment tool without the paper work}},
url = {http://dl.acm.org/citation.cfm?id=2462484},
year = {2013}
}
@techreport{Eliahu:EECS-2015-28,
abstract = {Recursion continues to play an important role in high-performance computing. However, parallelizing recursive algorithms while achieving high performance is nontrivial and can result in complex, hard-to-maintain code. In particular, assigning processors to subproblems is complicated by recent observations that communication costs often dominate computation costs. Previous work demonstrates that carefully choosing which divide-and-conquer steps to execute in parallel (breadth-first steps) and which to execute sequentially (depth-first steps) can result in significant performance gains over naive scheduling. Our Framework for Recursive Parallel Algorithms (FRPA) allows for the separation of an algorithm's implementation from its parallelization. The programmer must simply define how to split a problem, solve the base case, and merge solved subproblems; FRPA handles parallelizing the code and tuning the recursive parallelization strategy, enabling algorithms to achieve high performance. To demonstrate FRPA's performance capabilities, we present a detailed analysis of two algorithms: Strassen-Winograd and Communication-Optimal Parallel Recursive Rectangular Matrix Multiplication (CARMA). Our single-precision CARMA implementation is fewer than 80 lines of code and achieves a speedup of up to 11X over Intel's Math Kernel Library (MKL) matrix multiplication routine on "skinny" matrices. Our double-precision Strassen-Winograd implementation, at just 150 lines of code, is up to 45{\%} faster than MKL for large square matrix multiplications. To show FRPA's generality and simplicity, we implement six additional algorithms: mergesort, quicksort, TRSM, SYRK, Cholesky decomposition, and Delaunay triangulation. FRPA is implemented in C++, runs in shared-memory environments, uses Intel's Cilk Plus for task-based parallelism, and leverages OpenTuner to tune the parallelization strategy.},
author = {Eliahu, David and Spillinger, Omer and Fox, Armando and Demmel, James},
institution = {EECS Department, University of California, Berkeley},
month = {may},
number = {UCB/EECS-2015-28},
title = {{FRPA: A Framework for Recursive Parallel Algorithms}},
url = {http://www.eecs.berkeley.edu/Pubs/TechRpts/2015/EECS-2015-28.html},
year = {2015}
}
@inproceedings{autostyle-lwmoocs16,
address = {Philadelphia, PA},
author = {Chen, Antares and Wiese, Eliane and Yin, HeZheng and Choudhury, Rohan and Fox, Armando},
booktitle = {Third Symposium on Learning With {\{}MOOCs{\}} ({\{}LWMOOC III{\}})},
month = {oct},
title = {{Preliminary evidence for learning good coding style with Autostyle}},
year = {2016}
}
@inproceedings{sword,
address = {Honolulu, Hawaii},
author = {Ponnekanti, Shankar R and Fox, Armando},
booktitle = {Eleventh World Wide Web Conference (Web Engineering Track)},
month = {may},
title = {{SWORD: A Developer Toolkit for Web Service Composition}},
year = {2002}
}
@inproceedings{piql:sigmod10,
author = {Armbrust, Michael and Tu, Stephen and Fox, Armando and Franklin, Michael J and Patterson, David A and Lanham, Nick and Trushkowsky, Beth and Trutna, Jesse},
booktitle = {SIGMOD Conference},
pages = {1207--1210},
title = {{PIQL: a performance insightful query language}},
year = {2010}
}
@article{Fox2010,
author = {Fox, Armando and Patterson, David and Jordan, Michael I},
journal = {Insight},
pages = {37--46},
title = {{Invited Applications Paper Detecting Large-Scale System Problems by Mining Console Logs}},
year = {2010}
}
@article{dagstuhl-moocs-2014,
address = {Dagstuhl, Germany},
annote = {Keywords: Massive open online course, MOOC, SPOC, e-learning, education},
author = {Dillenbourg, Pierre and Fox, Armando and Kirchner, Claude and Mitchell, John and Wirsing, Martin},
doi = {http://dx.doi.org/10.4230/DagMan.4.1.1},
editor = {Dillenbourg, Pierre and Fox, Armando and Kirchner, Claude and Mitchell, John and Wirsing, Martin},
issn = {2193-2433},
journal = {Dagstuhl Manifestos},
number = {1},
pages = {1--27},
publisher = {Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
title = {{Massive Open Online Courses: Current State and Perspectives (Dagstuhl Perspectives Workshop 14112)}},
url = {http://drops.dagstuhl.de/opus/volltexte/2014/4786},
volume = {4},
year = {2014}
}
@article{Bod2009,
abstract = {Contemporary datacenters comprise hundreds or thousands of machines running applications requiring high availability and responsiveness. Although a performance crisis is easily detected by monitoring key end-to-end performance indicators (KPIs) such as response latency or request throughput, the variety of conditions that can lead to KPI degradation makes it difficult to select appropriate recovery actions. We propose and evaluate a methodology for automatic classification and identification of crises, and in particular for detecting whether a given crisis has been seen before, so that a known solution may be immediately applied. Our approach is based on a new and efficient representation of the datacenter's state called a fingerprint, constructed by statistical selection and summarization of the hundreds of performance metrics typically collected on such systems. Our evaluation uses 4 months of trouble-ticket data from a production datacenter with hundreds of machines running a 24x7 enterprise-class user-facing application. In experiments in a realistic and rigorous operational setting, our approach provides operators the information necessary to initiate recovery actions with 80{\%} correctness in an average of 10 minutes, which is 50 minutes earlier than the deadline provided to us by the operators. To the best of our knowledge this is the first rigorous evaluation of any such approach on a large-scale production installation.},
author = {Bod, Peter and Goldszmidt, Moises and Andersen, Hans},
institution = {Microsoft Research},
isbn = {9781605585772},
journal = {ACM European Conference on Computer Systems EuroSys},
pages = {111--124},
publisher = {ACM},
title = {{Fingerprinting the Datacenter : Automated Classification of Performance Crises}},
url = {http://portal.acm.org/citation.cfm?id=1755913.1755926},
year = {2009}
}
@article{ieee_adapt,
annote = {Special issue on adapting to network and client variability},
author = {Fox, Armando and Gribble, Steven D and Chawathe, Yatin and Brewer, Eric A},
journal = {{\{}IEEE{\}} Personal Communications (invited submission)},
month = {aug},
title = {{Adapting to Network and Client Variation Using Active Proxies: Lessons and Perspectives}},
year = {1998}
}
@inproceedings{mcafe2015,
address = {Vancouver, BC, Canada},
author = {Zhou, Mo and Cliff, Alison and Huang, Allen and Krishnan, Sanjay and Nonnecke, Brandie and Uchino, Kanji and Joseph, Samuel and Fox, Armando and Goldberg, Ken},
booktitle = {2nd {\{}ACM{\}} Conference on Learning at Scale ({\{}L@S{\}} 2015)},
month = {mar},
title = {{{\{}M-CAFE{\}}: Managing {\{}MOOC{\}} Student Feedback with Collaborative Filtering}},
year = {2015}
}
@book{Lister2004,
abstract = {A study by a ITiCSE 2001 working group ("the McCracken Group") established that many students do not know how to program at the conclusion of their introductory courses. A popular explanation for this incapacity is that the students lack the ability to problem-solve. That is, they lack the ability to take a problem description, decompose it into sub-problems and implement them, then assemble the pieces into a complete solution. An alternative explanation is that many students have a fragile grasp of both basic programming principles and the ability to systematically carry out routine programming tasks, such as tracing (or "desk checking") through code. This ITiCSE 2004 working group studied the alternative explanation, by testing students from seven countries, in two ways. First, students were tested on their ability to predict the outcome of executing a short piece of code. Second, students were tested on their ability, when given the desired function of short piece of near-complete code, to select the correct completion of the code from a small set of possibilities. Many students were weak at these tasks, especially the latter task, suggesting that such students have a fragile grasp of skills that are a prerequisite for problem-solving.},
author = {Lister, Raymond and Sepp{\"{a}}l{\"{a}}, Otto and Simon, Beth and Thomas, Lynda and Adams, Elizabeth S. and Fitzgerald, Sue and Fone, William and Hamer, John and Lindholm, Morten and McCartney, Robert and Mostr{\"{o}}m, Jan Erik and Sanders, Kate},
booktitle = {ACM SIGCSE Bulletin},
doi = {10.1145/1041624.1041673},
file = {:private/tmp/2004000904.pdf:pdf},
isbn = {4417853533},
issn = {00978418},
number = {4},
pages = {119--150},
title = {{A multi-national study of reading and tracing skills in novice programmers}},
volume = {36},
year = {2004}
}
@inproceedings{Sejits-BLB-SciPy,
author = {Prasad, Aakash and Howard, David and Kamil, Shoaib and Fox, Armando},
booktitle = {Proc. Eleventh Annual Scientific Computing with Python},
title = {{Parallel High Performance Bootstrapping in Python}},
year = {2012}
}
@article{spacewarp,
author = {Fox, Armando},
journal = {{\{}SYNC{\}}, the Magazine for Sinclair {\{}ZX80{\}} Users},
keywords = {nonref},
number = {3},
title = {{{\{}S{\}}pace {\{}W{\}}arp: a Graphics Space Game}},
volume = {2},
year = {1982}
}
@inproceedings{bodik:sysml07,
address = {Vancouver, BC},
author = {Bod{\'{i}}k, Peter and Sutton, Charles and Fox, Armando and Patterson, David and Jordan, Michael},
booktitle = {Second Workshop on Tackling Systems Problems Using Machine Learning (SysML'07)},
month = {dec},
title = {{Response-Time Modeling for Resource Allocation and Energy-Informed SLAs}},
year = {2007}
}
@article{Fox1997,
abstract = {Note: OCR errors may be found in this Reference List extracted from the full text article. ACM has opted to expose the complete List rather than only correct and linked references.},
author = {Fox, Armando and Gribble, Steven D and Chawathe, Yatin and Brewer, Eric A and Gauthier, Paul},
doi = {10.1145/269005.266662},
isbn = {0897919165},
issn = {01635980},
journal = {ACM SIGOPS Operating Systems Review},
number = {5},
pages = {78--91},
publisher = {ACM},
series = {SOSP '97},
title = {{Cluster-based scalable network services}},
url = {http://portal.acm.org/citation.cfm?doid=269005.266662},
volume = {31},
year = {1997}
}
@inproceedings{mobicom99_pervasive,
address = {Seattle, {\{}WA{\}}},
author = {Huang, Andrew C and Ling, Benjamin C and Ponnekanti, Shankar and Fox, Armando},
booktitle = {Fifth ACM Conference on Mobile Computing and Networking (MobiCom 99)},
month = {aug},
title = {{Pervasive Computing: What Is It Good For?}},
year = {1999}
}
@article{roc_retrospective,
annote = {Invited submission; to appear},
author = {Candea, George and Brown, Aaron and Fox, Armando and Patterson, David},
journal = {IEEE COMPUTER},
title = {{Recovery-Oriented Computing---Designing Multi-Tier Dependability}},
year = {2005}
}
@article{Wenger2015,
abstract = {The term "community of practice" is of relatively recent coinage, even though the phenomenon it refers to is age-?‐old. The concept has turned out to provide a useful perspective on knowing and learning. A growing number of people and organizations in various sectors are now focusing on communities of practice as a key to improving their performance. This brief and general introduction examines what communities of practice are and why researchers and practitioners in so many different contexts find them useful as an approach},
archivePrefix = {arXiv},
arxivId = {z0037},
author = {Wenger, Etienne and Trayner-Wenger, Beverly},
doi = {10.2277/0521663636},
eprint = {z0037},
file = {:Users/fox/Documents/fox/papers/mendeley/07-Brief-introduction-to-communities-of-practice.pdf:pdf},
isbn = {0521663636},
issn = {0011-8583},
journal = {April 2015},
pages = {1--8},
pmid = {4516818},
title = {{Communities of practice: a brief introduction}},
url = {http://wenger-trayner.com/wp-content/uploads/2015/04/07-Brief-introduction-to-communities-of-practice.pdf},
year = {2015}
}
@article{dstore-tos,
author = {Huang, Andrew C and Fox, Armando},
journal = {ACM Transactions on Storage},
number = {1},
title = {{Cheap Recovery: A Key to Self-managing State}},
volume = {1},
year = {2004}
}
@article{candea:cluster,
author = {Candea, George and Kawamoto, Shinichi and K$\backslash$ic$\backslash$iman, Emre and Fox, Armando},
journal = {Cluster Computing Journal},
month = {feb},
number = {1},
title = {{Autonomous Recovery In Componentized Internet Applications}},
volume = {9},
year = {2006}
}
@article{patent-channelmanager,
address = {US},
author = {E, JOHANSON BRADLEY and J, MILNE ANDREW and MICHAEL, EGGERS and ARMANDO, F O X},
isbn = {US 2015 0121249 A9 20150430},
publisher = {JOHANSON BRADLEY E},
title = {{Heterogenous content channel manager for ubiquitous computer software systems}},
url = {https://www.lens.org/lens/patent/US{\_}2015{\_}0121249{\_}A9{\_}20150430},
year = {2015}
}
@article{Resta2007,
abstract = {This paper reviews the research conducted in the last 20 years on the application of technology in support of collaborative learning in higher education. The review focuses primarily on studies that use Internet-based technologies and social interaction analysis. The review provides six sets of observations/recommendations regarding methodology, empirical evidence, and research gaps and issues that may help focus future research in this emerging field of study.},
archivePrefix = {arXiv},
arxivId = {arXiv:astro-ph/0507464v2},
author = {Resta, Paul and Laferri{\`{e}}re, Th{\'{e}}r{\`{e}}se},
doi = {10.1007/s10648-007-9042-7},
eprint = {0507464v2},
file = {:Users/fox/Documents/fox/papers/mendeley/10.1007{\%}2Fs10648-007-9042-7 (1).pdf:pdf},
isbn = {1040726X},
issn = {1040726X},
journal = {Educational Psychology Review},
keywords = {Collaborative learning,Technology for collaborative learning},
number = {1},
pages = {65--83},
pmid = {24151784},
primaryClass = {arXiv:astro-ph},
title = {{Technology in support of collaborative learning}},
volume = {19},
year = {2007}
}
@article{Fox2011,
abstract = {The article examines the technology of cloud computing, which involves large data centers filled with computers that primarily run their companys software. While this method of computing has traditionally been reserved for businesses, it is now becoming available to outside users such as scientists and educators who perform large-scale computations. The online retailing company Amazon was the first to allow outside users to run cloud software on their computers. The author examines the costs associated with cloud computing, use of the technology in education, and associated software. Cloud technology suppliers are listed, including the firms Intel and Advanced Micro Devices.},
author = {Fox, Armando},
institution = {Department of Computer Science, University of California, Berkeley, CA 94720, USA. fox@cs.berkeley.edu},
journal = {Science},
number = {6016},
pages = {406--407},
pmid = {21273473},
publisher = {American Association for the Advancement of Science},
title = {{Computer science. Cloud computing--what's in it for me as a scientist?}},
url = {http://www.sciencemag.org/cgi/doi/10.1126/science.1198981},
volume = {331},
year = {2011}
}
@inproceedings{piql-vldb,
address = {Istanbul, Turkey},
author = {Armbrust, Michael and Curtis, Kristal and Kraska, Tim and Fox, Armando and Franklin, Michael J and Patterson, David A},
booktitle = {Intl. Conf. on Very Large Databases (VLDB 2012)},
title = {{Success-Tolerant Query Processing in the Cloud}},
year = {2012}
}
@inproceedings{HanenbergStefanUniversityofDuisburg2010,
annote = {Summary: static typing neither helps nor hurts developer productivity

      },
author = {{Hanenberg, Stefan (University of Duisburg}, Essen)},
booktitle = {OOPSLA},
file = {:Users/fox/Documents/fox/papers/mendeley/Hanenberg, Stefan (University of Duisburg - 2010 - An experiment about static and dynamic type systems Doubts about the positive impact.pdf:pdf},
title = {{An experiment about static and dynamic type systems: Doubts about the positive impact of static type systems on development time}},
url = {http://medcontent.metapress.com/index/A65RM03P4874243N.pdf},
year = {2010}
}
@inproceedings{candea:measurability,
address = {G{\"{o}}teborg, Sweden},
annote = {We propose a structuring model, called recursive
restartability, aimed at controlling the amount of
end-to-end unavailability and improving the
measurability of software infrastructures with high
availability requirements. Recursive restartability
exploits the benefits of restarts at various levels
within complex software systems and relies on an
execution infrastructure to monitor, cure, and
rejuvenate software components. We show how system
architects can measure and reason about the
availability of their systems, as long as these are
recursively restartable.},
author = {Candea, George and Fox, Armando},
booktitle = {Proceedings of the 1st {\{}W{\}}orkshop on {\{}E{\}}valuating and {\{}A{\}}rchitecting {\{}S{\}}ystem {\{}D{\}}ependability ({\{}EASY{\}})},
month = {jul},
organization = {{\{}IEEE{\}} {\{}C{\}}omputer {\{}S{\}}ociety},
title = {{Designing for High Availability and Measurability}},
year = {2001}
}
@article{Armbrust2009,
abstract = {(from executive summary) Cloud Computing, the long-held dream of computing as a utility, has the potential to transform a large part of the IT industry, making software even more attractive as a service and shaping the way IT hardware is designed and purchased. Developers with innovative ideas for new Internet services no longer require the large capital outlays in hardware to deploy their service or the human expense to operate it. They need not be concerned about overprovisioning for a service whose popularity does not meet their predictions, thus wasting costly resources, or underprovisioning for one that becomes wildly popular, thus missing potential customers and revenue. Moreover, companies with large batch-oriented tasks can get results as quickly as their programs can scale, since using 1000 servers for one hour costs no more than using one server for 1000 hours. This elasticity of resources, without paying a premium for large scale, is unprecedented in the history of IT.},
author = {Armbrust, Michael and Fox, Armando and Griffith, Rean and Joseph, Anthony D and Katz, Randy and Konwinski, Andy and Lee, Gunho and Patterson, David and Rabkin, Ariel and Stoica, Ion and Zaharia, Matei},
doi = {10.1145/1721654.1721672},
institution = {UC Berkeley Reliable Adaptive Distributed Systems Laboratory},
issn = {00010782},
journal = {Computing},
keywords = {cloud computing,distributed system economics,internet datacenters,utility computing},
number = {C},
pages = {07--013},
publisher = {Citeseer},
series = {UCB/EECS-2009-28},
title = {{Above the Clouds : A Berkeley View of Cloud Computing Cloud Computing : An Old Idea Whose Time Has ( Finally ) Come}},
url = {http://scholar.google.com/scholar?hl=en{\&}btnG=Search{\&}q=intitle:Above+the+Clouds:+A+Berkeley+View+of+Cloud+Computing{\#}0},
volume = {53},
year = {2009}
}
@inproceedings{fox:mttr,
address = {San Jose, CA},
author = {Fox, Armando and Patterson, David},
booktitle = {Proceedings of the 2nd {\{}W{\}}orkshop on {\{}E{\}}valuating and {\{}A{\}}rchitecting {\{}S{\}}ystem {\{}D{\}}ependability ({\{}EASY{\}})},
month = {oct},
organization = {{\{}IEEE{\}} {\{}C{\}}omputer {\{}S{\}}ociety},
title = {{When Does Fast Recovery Trump High Reliability?}},
year = {2002}
}
@article{snap,
author = {Zaharia, Matei and Bolosky, William J and Curtis, Kristal and Fox, Armando and Patterson, David A and Shenker, Scott and Stoica, Ion and Karp, Richard M and Sittler, Taylor},
journal = {CoRR},
title = {{Faster and More Accurate Sequence Alignment with SNAP}},
volume = {abs/1111.5},
year = {2011}
}
@inproceedings{coleman:oncall,
address = {New York, NY},
author = {Coleman, Keith and Norris, Jim and Fox, Armando and Candea, George},
booktitle = {Proc. First International Conference on Autonomic Computing (ICAC 2004)},
month = {may},
title = {{{\{}OnCall{\}}: Defeating Spikes with a Free-Market Server Cluster}},
year = {2004}
}
@article{eheap-jss,
author = {Johanson, Brad and Fox, Armando},
journal = {Journal of Systems and Software},
number = {3},
title = {{Extending Tuplespaces for Coordination in Interactive Workspaces}},
volume = {69},
year = {2004}
}
@inproceedings{bodik:amazon,
address = {Dublin, Ireland},
author = {Bod{\'{i}}k, Peter and Fox, Armando and Jordan, Michael I and Patterson, David and Banerjee, Ajit and Jagannathan, Ramesh and Su, Tina and Tenginakai, Shivaraj and Turner, Ben and Ingalls, Jon},
booktitle = {First Workshop on Hot Topics in Autonomic Computing (HotAC'06)},
month = {jun},
title = {{Advanced Tools for Operators at {\{}A{\}}mazon.com}},
year = {2006}
}
@article{Bodik2010a,
abstract = {Evaluating the resiliency of stateful Internet services to sig- nificant workload spikes and data hotspots requires realistic workload traces that are usually very difficult to obtain. A popular approach is to create a workload model and gen- erate synthetic workload, however, there exists no charac- terization and model of stateful spikes. In this paper we analyze five workload and data spikes and find that they vary significantly in many important aspects such as steep- ness, magnitude, duration, and spatial locality. We propose and validate a model of stateful spikes that allows us to synthesize volume and data spikes and could thus be used by both cloud computing users and providers to stress-test their infrastructure.},
author = {Bod{\'{i}}k, Peter and Fox, Armando and Franklin, Michael J and Jordan, Michael I and Patterson, David A},
doi = {10.1145/1807128.1807166},
file = {:Users/fox/Documents/fox/papers/mendeley/Bod{\'{i}}k et al. - 2010 - Workload Spikes for Stateful Services.pdf:pdf},
isbn = {9781450300360},
journal = {Most},
pages = {241},
publisher = {ACM Press},
title = {{Workload Spikes for Stateful Services}},
url = {http://portal.acm.org/citation.cfm?doid=1807128.1807166},
volume = {d},
year = {2010}
}
@proceedings{las2014,
address = {New York, NY, USA},
editor = {Fox, Armando and Hearst, Marti A and Chi, Michelene},
isbn = {978-1-4503-2669-8},
month = {mar},
publisher = {ACM},
title = {{L@S '14: Proceedings of the First ACM Conference on Learning @ Scale Conference}},
year = {2014}
}
@inproceedings{fox:harvest-yield,
address = {Rio Rico, AZ},
author = {Fox, A and Brewer, E},
booktitle = {Proceedings of the 7th Workshop on Hot Topics in Operating System},
month = {mar},
title = {{Harvest, Yield, and Scalable Tolerant Systems}},
year = {1999}
}
@inproceedings{sejits-kdt,
author = {Bulu{\c{c}}, Ayd$\backslash$in and Duriakova, Erika and Fox, Armando and Gilbert, John and Kamil, Shoaib and Lugowski, Adam and Oliker, Leonid and Williams, Samuel},
booktitle = {Proceedings of the IPDPS},
doi = {10.1109/IPDPS.2013.52},
publisher = {IEEE Computer Society},
title = {{High-Productivity and High-Performance Analysis of Filtered Semantic Graphs}},
url = {http://gauss.cs.ucsb.edu/{~}aydin/ipdps13-kdtsejits.pdf},
year = {2013}
}
@inproceedings{McMaster2013,
abstract = {UglyCode starts with good code and apply transformations to obfuscate variable names, mess up indentation/line breaks, add useless comments, etc., to teach good style "in reverse".},
address = {San Antonio, Tx},
author = {McMaster, K and Sambasivam, S and Wolthuis, Stuart},
booktitle = {Proceedings of the Information Systems Educators Conference},
file = {:Users/fox/Documents/fox/papers/mendeley/McMaster, Sambasivam, Wolthuis - 2013 - Teaching Programming Style with Ugly Code(2).pdf:pdf},
keywords = {algorithm,java,layout,programming style,ugly code},
title = {{Teaching Programming Style with Ugly Code}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.400.9411{\&}rep=rep1{\&}type=pdf},
year = {2013}
}
@inproceedings{ling:hotos9,
address = {Lihue, HI},
author = {Ling, Ben and Fox, Armando},
booktitle = {Proc.9th {\{}W{\}}orkshop on {\{}H{\}}ot {\{}T{\}}opics in {\{}O{\}}perating {\{}S{\}}ystems},
month = {jun},
title = {{The Case for a Session State Storage Layer}},
year = {2003}
}
@inproceedings{scads:cidr09,
author = {Armbrust, Michael and Fox, Armando and Patterson, David A and Lanham, Nick and Trushkowsky, Beth and Trutna, Jesse and Oh, Haruki},
booktitle = {CIDR 2009},
title = {{{\{}SCADS{\}}: Scale-Independent Storage for Social Computing Applications}},
year = {2009}
}
@article{Ganapathi2010,
abstract = {A recent trend for data-intensive computations is to use pay-as-you-go execution environments that scale transparently to the user. However, providers of such environments must tackle the challenge of configuring their system to provide maximal performance while minimizing the cost of resources used. In this paper, we use statistical models to predict resource requirements for Cloud computing applications. Such a prediction framework can guide system design and deployment decisions such as scale, scheduling, and capacity. In addition, we present initial design of a workload generator that can be used to evaluate alternative configurations without the overhead of reproducing a real workload. This paper focuses on statistical modeling and its application to data-intensive workloads.},
author = {Ganapathi, Archana and Chen, Yanpei and Fox, Armando and Katz, Randy and Patterson, David},
doi = {10.1109/ICDEW.2010.5452742},
journal = {Workshop on SelfManaging Database Systems SMDB},
keywords = {[electronic manuscript]},
pages = {87--92},
publisher = {IEEE},
title = {{Statistics-Driven Workload Modeling for the Cloud}},
url = {http://ieeexplore.ieee.org/xpls/abs{\_}all.jsp?arnumber=5452742},
year = {2010}
}
@techreport{iros-tr,
address = {Stanford, CA},
author = {Johanson, Brad and Fox, Armando and Hanrahan, Pat and Winograd, Terry},
institution = {Stanford Computer Science Department},
number = {CS-2001-02},
title = {{The Event Heap: An Enabling Infrastructure for Interactive Workspaces}},
year = {2001}
}
@article{Armbrust2010a,
abstract = {Clearing the clouds away from the true potential and obstacles posed by this computing capability.},
author = {Armbrust, Michael and Fox, Armando and Griffith, Rean and Joseph, Anthony D and Katz, Randy and Konwinski, Andy and Lee, Gunho and Patterson, David and Rabkin, Ariel and Stoica, Ion and Zaharia, Matei},
doi = {10.1145/1721654.1721672},
issn = {00010782},
journal = {Communications of the ACM},
number = {4},
pages = {50--58},
pmid = {19435745},
publisher = {ACM},
title = {{A view of cloud computing}},
url = {http://portal.acm.org/citation.cfm?id=1721672},
volume = {53},
year = {2010}
}
@inproceedings{melloul:icws-short,
author = {Melloul, Laurence and Others},
booktitle = {To Appear, IEEE ICWS},
title = {{Reusable Functional Composition Patterns for Web Services}},
year = {2004}
}
@article{BarbaraEricsonKantwonRogersMirandaParkerBrianaMorrisonMarkGuzdial2016,
annote = {Design principles for ebooks to help CS teachers (esp. intro):
- Expert teachers must be good at understanding/helping debug student code, vs writing code. So focus on that.
- "Audio tours" (narration of example to supplement text) not worth it.
- Use worked examples + low-cognitive-load practice problems.
- Use subgoal labels on practice problems.
- Provide "traditional" things teachers want: end-of-chapter exercises, solution keys, lesson plans, quizzes, ... in addition to the "innovative" ebook content.},
author = {{Barbara Ericson, Kantwon Rogers, Miranda Parker, Briana Morrison, Mark Guzdial}, Georgia Institute of Technology},
journal = {Proc. 2016 International Conference on Education Research (ICER 2016)},
title = {{Identifying design principles for CS teacher ebooks throuh design-based research}},
year = {2016}
}
@inproceedings{uist97,
address = {Banff, Canada},
author = {Fox, Armando and Gribble, Steven D and Chawathe, Yatin and Polito, Anthony and Ling, Benjamin and Huang, Andrew C and Brewer, Eric A},
booktitle = {User Interface Software and Technology (UIST) 97},
month = {oct},
title = {{Orthogonal {\{}E{\}}xtensions to the {\{}WWW{\}} {\{}U{\}}ser {\{}I{\}}nterface {\{}U{\}}sing {\{}C{\}}lient-{\{}S{\}}ide {\{}T{\}}echnologies}},
year = {1997}
}
@inproceedings{chat-no-action,
address = {Atlanta, GA},
author = {Coetzee, Derrick and Fox, Armando and Hearst, Marti A and Hartmann, Bjoern},
booktitle = {1st {\{}ACM{\}} Conference on Learning At Scale (L@S 2014)},
month = {mar},
title = {{Chatrooms in {\{}MOOCs{\}}: All Talk and No Action}},
year = {2014}
}
@inproceedings{topgunwingman,
address = {Lake District, UK},
annote = {Software at $\backslash$url{\{}http://www.isaac.cs.berkeley.edu/pilot/wingman{\}}},
author = {Fox, Armando and Goldberg, Ian and Gribble, Steven D and Polito, Anthony and Lee, David C},
booktitle = {IFIP International Conference on Distributed Systems Platforms and Open Distributed Processing (Middleware '98)},
month = {sep},
title = {{Experience With {\{}T{\}}op {\{}G{\}}un {\{}W{\}}ingman: A Proxy-Based Graphical Web Browser for the {\{}P{\}}alm {\{}P{\}}ilot {\{}PDA{\}}}},
year = {1998}
}
@inproceedings{mooc-info-sources,
address = {Atlanta, GA},
author = {Stephens-Martinez, Kristin and Hearst, Marti A and Fox, Armando},
booktitle = {1st {\{}ACM{\}} Conference on Learning At Scale (L@S 2014)},
month = {mar},
title = {{Monitoring {\{}MOOCs{\}}: Which Information Sources Do Instructors Value?}},
year = {2014}
}
@article{Murphy-hill2012,
author = {Murphy-hill, Emerson and Parnin, Chris and Black, Andrew P},
file = {:Users/fox/Documents/fox/papers/mendeley/Murphy-hill, Parnin, Black - 2012 - How We Refactor , and How We Know It.pdf:pdf},
isbn = {9781424434527},
number = {1},
pages = {55--57},
title = {{How We Refactor , and How We Know It}},
volume = {38},
year = {2012}
}
@unpublished{glomap,
annote = {Class proceedings, CS 294-3 Multimedia Systems and
Services, Fall 1995},
author = {Fox, Armando},
title = {{GloMap: Datatype-Specific Distillation Applied to a Geographic Database}}
}
@article{kiciman:detecting,
author = {K$\backslash$ic$\backslash$iman, Emre and Fox, Armando},
journal = {IEEE Transactions on Neural Networks (special issue on Adaptive Systems)},
month = {mar},
title = {{Detecting Application-level Failures in Component-based Internet Services}},
year = {2005}
}
@book{esaas,
address = {San Francisco, CA},
annote = {Edited by Samuel Joseph. Also available in Spanish, Brazilian Portuguese, and Chinese.},
author = {Fox, Armando and Patterson, David},
edition = {1st editio},
publisher = {Strawberry Canyon LLC},
title = {{{\{}E{\}}ngineering {\{}S{\}}oftware as a {\{}S{\}}ervice: {\{}A{\}}n {\{}A{\}}gile {\{}A{\}}pproach {\{}U{\}}sing {\{}C{\}}loud {\{}C{\}}omputing}},
year = {2014}
}
@article{Chen2002,
abstract = {Traditional problem determination techniques rely on static dependency models that are difficult to generate accurately in today's large, distributed, and dynamic application environments such as e-commerce systems. We present a dynamic analysis methodology that automates problem determination in these environments by 1) coarse-grained tagging of numerous real client requests as they travel through the system and 2) using data mining techniques to correlate the believed failures and successes of these requests to determine which components are most likely to be at fault. To validate our methodology, we have implemented Pinpoint, a framework for root cause analysis on the J2EE platform that requires no knowledge of the application components. Pinpoint consists of three parts: a communications layer that traces client requests, a failure detector that uses traffic-sniffing and middleware instrumentation, and a data analysis engine. We evaluate Pinpoint by injecting faults into various application components and show that Pinpoint identifies the faulty components with high accuracy and produces few false-positives.},
author = {Chen, Mike Y and Kiciman, Emre and Fratkin, Eugene and Fox, Armando and Brewer, E},
doi = {10.1109/DSN.2002.1029005},
isbn = {0769515975},
journal = {Proceedings International Conference on Dependable Systems and Networks},
keywords = {data clustering,data mining algo,problem determination,problem diagnosis,root cause analysis},
pages = {595--604},
publisher = {IEEE Comput. Soc},
series = {DSN '02},
title = {{Pinpoint: problem determination in large, dynamic Internet services}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1029005},
volume = {0},
year = {2002}
}
@inproceedings{patchpanel-percom04,
address = {Orlando, FL},
author = {(RWTH-Aachen), Rafael Ballagas and Szybalski, Andy and Fox, Armando},
booktitle = {Second IEEE International Conference on Pervasive Computing and Communications (Percom 2004)},
title = {{The PatchPanel: Enabling Control-Flow Interoperability in Ubicomp Environments}},
year = {2004}
}
@article{MacWilliam2013,
abstract = {When instructors of Harvard's large-enrollment introductory course CS50, 9{\%} of students never read the async textual feedback human TAs provide; the percentage increases throughout semester, peaking at 14{\%}, leading the authors to wonder if async textual feedback works.},
author = {MacWilliam, T and Malan, DJ},
file = {:Users/fox/Documents/fox/papers/mendeley/MacWilliam, Malan - 2013 - Streamlining grading toward better feedback.pdf:pdf},
isbn = {9781450320788},
journal = {Proceedings of the 18th ACM conference on {\ldots}},
keywords = {assignment submission,online feedback},
pages = {147--152},
title = {{Streamlining grading toward better feedback}},
url = {http://dl.acm.org/citation.cfm?id=2462506},
year = {2013}
}
@techreport{interop-tr,
address = {Stanford, CA},
annote = {$\backslash$url{\{}http://iwork.stanford.edu/pubs/interop-tr.pdf{\}}},
author = {Ponnekanti, Shankar R and Fox, Armando},
institution = {Stanford University},
month = {jan},
title = {{Application Service Interoperation without Standardized Service Interfaces}},
year = {2003}
}
@article{Johnson1994,
abstract = {elements of cooperative learning [positive interdependence, face-to-face promotive interaction, individual accountability/personal responsibility, interpersonal and small-group skills, group processing] / research rationale [cooperative efforts and achievement/productivity, interpersonal relationships and acceptance of differences, accuracy of perspective taking, creativity, self-esteem, understanding interdependence] / relationships among outcomes (PsycINFO Database Record (c) 2000 APA, all rights reserved)},
annote = {Positive interdependence: each group member has unique contribution to make (skills, resources, task{\ldots}) and all are essential to group success, and each member is responsible for whole group learning. Positive reward interdependence rewards group for demonstrating levels of individual learning.
Promotive interaction
Individual accountability
Effective cooperative learning can mprove creativity, self-esteem, inclusiveness/"liking" among students},
author = {Johnson, Roger T and Johnson, David W},
doi = {10.1007/BF00962280},
file = {:Users/fox/Documents/fox/papers/mendeley/Johnson{\_}Overview{\_}of{\_}Cooperative{\_}Learning.pdf:pdf},
isbn = {ISBN: 1557665788; 9781557665782; Stock no: 1122410 LCCN: 2002-22248},
issn = {09259902},
journal = {Creativity and collaborative learning: A practical guide to empowering students and teachers},
keywords = {Cooperative Learning,Curriculum {\&} Programs {\&} Teaching Methods--3530,Group Participation,School Learning,Social Skills},
pages = {31--44},
title = {{An overview of cooperative learning}},
year = {1994}
}
@inproceedings{candea:rr-mercury,
address = {Washington, DC},
author = {Candea, George and Cutler, James and Fox, Armando and Doshi, Rushabh and Garg, Priyank and Gowda, Rakesh},
booktitle = {Proc.{\{}I{\}}nternational {\{}C{\}}onference on {\{}D{\}}ependable {\{}S{\}}ystems and {\{}N{\}}etworks},
month = {jun},
pages = {605--614},
title = {{Reducing Recovery Time in a Small Recursively Restartable System}},
year = {2002}
}
@article{Xu2010,
abstract = {We describe our early experience in applying our console log mining techniques 19, 20 to logs from production Google systems with thousands of nodes. This data set is five orders of magnitude in size and contains almost 20 times as many messages types as the Hadoop data set we used in 19. It also has many properties that are unique to large scale production deployments (e.g., the system stays on for several months and multiple versions of the software can run concurrently). Our early experience shows that our techniques, including source code based log parsing, state and sequence based feature creation and problem detection, work well on this production data set. We also discuss our experience in using our log parser to assist the log sanitization.},
author = {Xu, Wei and Huang, L and Fox, Armando and Patterson, David and Jordan, Michael},
journal = {Proc of SLAML},
pages = {5},
publisher = {USENIX Association},
series = {SLAML'10},
title = {{Experience Mining Google ' s Production Console Logs}},
url = {http://www.usenix.org/event/slaml10/tech/full{\_}papers/Xu.pdf},
year = {2010}
}
@inproceedings{autostyle-its2016,
address = {Zagreb, Croatia},
author = {Choudhury, Rohan Roy and Yin, HeZheng and Fox, Armando},
booktitle = {13th International Conference on Intelligent Tutoring Systems ({\{}ITS{\}} 2016)},
month = {jun},
title = {{Scale-Driven Automatic Hint Generation for Coding Style}},
year = {2016}
}
@article{Ko2004,
author = {Ko, Andrew J and Myers, Brad A and Aung, Htet Htet},
file = {:private/tmp/Six Learning Barriers in End-User Programming Systems.pdf:pdf},
journal = {Visual Languages and Human Centric Computing, 2004 IEEE Symposium on},
pages = {199--206},
title = {{Six learning barriers in end-user programming systems}},
year = {2004}
}
@article{Higgins2005,
abstract = {This article reports on the design, implementation, and usage of the CourseMarker (formerly known as CourseMaster) courseware Computer Based Assessment (CBA) system at the University of Nottingham. Students use CourseMarker to solve (programming) exercises and to submit their solutions. CourseMarker returns immediate results and feedback to the students. Educators author a variety of exercises that benefit the students while offering practical benefits. To date, both educators and students have been hampered by CBA software that has been constructed to assess text-based or multiple-choice answers only. Although there exist a few CBA systems with some capability to automatically assess programming coursework, none assess Java programs and none are as flexible, architecture-neutral, robust, or secure as the CourseMarker CBA system.},
author = {Higgins, Colin a. and Gray, Geoffrey and Symeonidis, Pavlos and Tsintsifas, Athanasios},
doi = {10.1145/1163405.1163410},
isbn = {1531-4278},
issn = {15314278},
journal = {Journal on Educational Resources in Computing},
number = {3},
pages = {5--es},
title = {{Automated assessment and experiences of teaching programming}},
volume = {5},
year = {2005}
}
@article{Johnson1994,
abstract = {elements of cooperative learning [positive interdependence, face-to-face promotive interaction, individual accountability/personal responsibility, interpersonal and small-group skills, group processing] / research rationale [cooperative efforts and achievement/productivity, interpersonal relationships and acceptance of differences, accuracy of perspective taking, creativity, self-esteem, understanding interdependence] / relationships among outcomes (PsycINFO Database Record (c) 2000 APA, all rights reserved)},
annote = {Positive interdependence: each group member has unique contribution to make (skills, resources, task{\ldots}) and all are essential to group success, and each member is responsible for whole group learning. Positive reward interdependence rewards group for demonstrating levels of individual learning.
Promotive interaction
Individual accountability
Effective cooperative learning can mprove creativity, self-esteem, inclusiveness/"liking" among students},
author = {Johnson, Roger T and Johnson, David W},
doi = {10.1007/BF00962280},
file = {:Users/fox/Documents/fox/papers/mendeley/Johnson{\_}Overview{\_}of{\_}Cooperative{\_}Learning.pdf:pdf},
isbn = {ISBN: 1557665788; 9781557665782; Stock no: 1122410 LCCN: 2002-22248},
issn = {09259902},
journal = {Creativity and collaborative learning: A practical guide to empowering students and teachers},
keywords = {Cooperative Learning,Curriculum {\&} Programs {\&} Teaching Methods--3530,Group Participation,School Learning,Social Skills},
pages = {31--44},
title = {{An overview of cooperative learning}},
year = {1994}
}
@article{Dillenbourg2002,
abstract = {Free collaboration does not systematically produce learning. One way to enhance the effectiveness of collaborative learning is to structure interactions by engaging students in well-defined scripts. A collaboration script is a set of instructions prescribing how students should form groups, how they should interact and collaborate and how they should solve the problem. In computer-supported collaborative learning (CSCL), the script is reified in the interface of the learning environment. This contribution dismantles the concept of script. Syntactically, a script is sequence of phases and each phase can be described by five attributes. The grammatical combination of these elements may however produce any kind of pedagogical method, even those that have nothing to do with the idea of collaborative learning. On the one hand, the definition of scripts constitutes a promising convergence between educational engineering and socio-cultural approaches but, on the other hand, it drifts away from the genuine notion of collaborative learning. Will the fun and the richness of group interactions survive to this quest for effectiveness? The answer depends on the semantics of collaborative scripts: what is the design rationale, what is the core mechanism in the script through which the script designer expects to foster productive interactions and learning?},
author = {Dillenbourg, Pierre},
doi = {10.1007/s11165-004-8795-y},
file = {:Users/fox/Documents/fox/papers/mendeley/Dillenbourg-Pierre-2002.pdf:pdf},
isbn = {90-3582-047-9},
issn = {08895406},
journal = {Three worlds of CSCL: Can we support CSCL?},
keywords = {collaboration scripts},
pages = {61--91},
pmid = {10842115},
title = {{Over-scripting CSCL : The risks of blending collaborative learning with instructional design .}},
year = {2002}
}
@article{Dillenbourg1999,
annote = {Modified Roschelle {\&} Teasley def: "A situated, coordinated, synchronous activity that is result of a continued attempt to construct and maintain a shared conception of a problem." [situation, interaction, processes, effects]
"Two or more people learning something together". - Boundary between 'social' and 'cognitive' process elements is blurry. Many DoF, but in general:
- Small scale (3 vs 3000)
- "joint solving of a common problem/goal" concretizes the learning activity
- instructions to subjects, physical setting, constraints (eg how performance will be graded), and possibly scaffolding in the form of declarative rules such as "Everyone should speak up once" (vs method or script)
- collaborative = approx symmetry of participants' knowledge, standing, task types (vs. "cooperation" which is divide-and-conquer)
- negotiation (vs one participant imposing their view)
- generally synchronous communication (vs async)

"Internalization": transfer of tools from "social plane" to "inner/reasoning plane"
Should effects of CL be assessed on group members individually or the group as a whole?},
author = {Dillenbourg, P},
doi = {10.1.1.167.4896},
file = {:Users/fox/Documents/fox/papers/mendeley/Dillenbourg-Pierre-1999.pdf:pdf},
isbn = {0080430732},
issn = {08895406},
journal = {Collaborative-learning: Cognitive and Computational Approaches},
number = {1},
pages = {1--19},
pmid = {10842116},
title = {{What do you mean by 'collaborative learning'?}},
url = {https://telearn.archives-ouvertes.fr/hal-00190240/document},
year = {1999}
}
@article{Farrell2013,
annote = {Excellent related work section discussing various pedagogical aspects of grading team projects},
author = {Farrell, V and Farrell, Graham and Kindler, Paul},
file = {:Users/fox/Documents/fox/papers/mendeley/Farrell, Farrell, Kindler - 2013 - Capstone project online assessment tool without the paper work.pdf:pdf},
isbn = {9781450320788},
journal = {Proceedings of the 18th {\ldots}},
keywords = {assessment,capstone,group,it,peer,project,tcs,team},
pages = {201--206},
title = {{Capstone project online assessment tool without the paper work}},
url = {http://dl.acm.org/citation.cfm?id=2462484},
year = {2013}
}
@book{Lister2004a,
abstract = {A study by a ITiCSE 2001 working group ("the McCracken Group") established that many students do not know how to program at the conclusion of their introductory courses. A popular explanation for this incapacity is that the students lack the ability to problem-solve. That is, they lack the ability to take a problem description, decompose it into sub-problems and implement them, then assemble the pieces into a complete solution. An alternative explanation is that many students have a fragile grasp of both basic programming principles and the ability to systematically carry out routine programming tasks, such as tracing (or "desk checking") through code. This ITiCSE 2004 working group studied the alternative explanation, by testing students from seven countries, in two ways. First, students were tested on their ability to predict the outcome of executing a short piece of code. Second, students were tested on their ability, when given the desired function of short piece of near-complete code, to select the correct completion of the code from a small set of possibilities. Many students were weak at these tasks, especially the latter task, suggesting that such students have a fragile grasp of skills that are a prerequisite for problem-solving.},
annote = {{\~{}}556 multinational CS students who had just completed or were about to complete their first semester programming course were given 12 multiple-choice questions testing their ability to "trace" code mostly involving loops and linear arrays ("What would Python print after this code is run"). The questions varied in difficulty. A subset (37) of students were interviewed afterward to ask them to "walk through" their reasoning for some of their answers. A subset (56) of students' "doodles" (diagrams/notations they made while working out the questions) were also analyzed. Some findings:
(1) The question set had a Cronbach's alpha of .75 for reliability ({\textgreater}=.8 is considered "reliable"), so the questions are reasonable.
(2) Students in middle 50{\%} got some questions correct, so they understand basic concepts but can't reliably work their way through more complex chains of code.
(3) "Doodles" were coded into 11 categories such as "help in tracing", "alternate answer", "show status of a variable", etc indicating why the student appeared to have made the doodle.},
author = {Lister, Raymond and Sepp{\"{a}}l{\"{a}}, Otto and Simon, Beth and Thomas, Lynda and Adams, Elizabeth S. and Fitzgerald, Sue and Fone, William and Hamer, John and Lindholm, Morten and McCartney, Robert and Mostr{\"{o}}m, Jan Erik and Sanders, Kate},
booktitle = {ACM SIGCSE Bulletin},
doi = {10.1145/1041624.1041673},
file = {:private/tmp/2004000904.pdf:pdf},
isbn = {4417853533},
issn = {00978418},
number = {4},
pages = {119--150},
title = {{A multi-national study of reading and tracing skills in novice programmers}},
volume = {36},
year = {2004}
}
@article{Mens2004,
abstract = { We provide an extensive overview of existing research in the field of software refactoring. This research is compared and discussed based on a number of different criteria: the refactoring activities that are supported, the specific techniques and formalisms that are used for supporting these activities, the types of software artifacts that are being refactored, the important issues that need to be taken into account when building refactoring tool support, and the effect of refactoring on the software process. A running example is used to explain and illustrate the main concepts.},
author = {Mens, Tom and Tourw{\'{e}}, Tom},
doi = {10.1109/TSE.2004.1265817},
file = {:Users/fox/Documents/fox/papers/mendeley/Mens, Tourw{\'{e}} - 2004 - A survey of software refactoring(2).pdf:pdf},
isbn = {0098-5589},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Coding tools and techniques,Programming environments/construction tools,Reengineering,Restructuring,Reverse engineering},
number = {2},
pages = {126--139},
title = {{A survey of software refactoring}},
volume = {30},
year = {2004}
}
@article{Blau2015,
abstract = {We created an Eclipse plug-in called FrenchPress that partially automates the task of giving students feedback on their Java programs. It is designed not for novices but for students taking their second or third Java course: students who know enough Java to write a working program but lack the judgment to recognize bad code when they see it. FrenchPress does not diagnose compile-time or runtime errors, or logical errors that produce incorrect output. It targets silent flaws, flaws the student is unable to identify for himself because nothing in the programming environment alerts him. FrenchPress diagnoses flaws characteristic of programmers who have not yet assimilated the object-oriented idiom. Such shortcomings include misuse of the public modifier, fields that should have been local variables, and instance variables that should have been class constants. Other rules address the all too common misunderstanding of the boolean datatype. FrenchPress delivers explanatory messages in a vocabulary appropriate to the student's current level. This paper reports preliminary results of a formative evaluation of FrenchPress conducted in a Fall 2014 data structures and algorithms course. User satisfaction survey responses indicate that among the students who received substantive diagnostic suggestions from FrenchPress, the percentage who were motivated to modify their program varied from 36{\%} to 64{\%} on four different assignments.},
author = {Blau, Hannah and Moss, J Eliot B},
doi = {10.1145/2729094.2742622},
file = {:Users/fox/Documents/fox/papers/mendeley/Blau, Moss - 2015 - FrenchPress Gives Students Automated Feedback on Java Program Flaws.pdf:pdf},
isbn = {9781450334402},
issn = {1942647X},
journal = {ITiCSE '15},
keywords = {Eclipse plug-in,educational technology,program analysis,static analysis},
pages = {15--20},
title = {{FrenchPress Gives Students Automated Feedback on Java Program Flaws}},
year = {2015}
}
@article{Murphy-hill2012,
author = {Murphy-hill, Emerson and Parnin, Chris and Black, Andrew P},
file = {:Users/fox/Documents/fox/papers/mendeley/Murphy-hill, Parnin, Black - 2012 - How We Refactor , and How We Know It.pdf:pdf},
isbn = {9781424434527},
number = {1},
pages = {55--57},
title = {{How We Refactor , and How We Know It}},
volume = {38},
year = {2012}
}
@inproceedings{McMaster2013,
abstract = {UglyCode starts with good code and apply transformations to obfuscate variable names, mess up indentation/line breaks, add useless comments, etc., to teach good style "in reverse".},
address = {San Antonio, Tx},
author = {McMaster, K and Sambasivam, S and Wolthuis, Stuart},
booktitle = {Proceedings of the Information Systems Educators Conference},
file = {:Users/fox/Documents/fox/papers/mendeley/McMaster, Sambasivam, Wolthuis - 2013 - Teaching Programming Style with Ugly Code(2).pdf:pdf},
keywords = {algorithm,java,layout,programming style,ugly code},
title = {{Teaching Programming Style with Ugly Code}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.400.9411{\&}rep=rep1{\&}type=pdf},
year = {2013}
}
@article{MacWilliam2013,
abstract = {When instructors of Harvard's large-enrollment introductory course CS50, 9{\%} of students never read the async textual feedback human TAs provide; the percentage increases throughout semester, peaking at 14{\%}, leading the authors to wonder if async textual feedback works.},
annote = {When instructors of Harvard's large-enrollment introductory course CS50, 9{\%} of students never read the async textual feedback human TAs provide; the percentage increases throughout semester, peaking at 14{\%}, leading the authors to wonder if async textual feedback works.},
author = {MacWilliam, T and Malan, DJ},
file = {:Users/fox/Documents/fox/papers/mendeley/MacWilliam, Malan - 2013 - Streamlining grading toward better feedback.pdf:pdf},
isbn = {9781450320788},
journal = {Proceedings of the 18th ACM conference on {\ldots}},
keywords = {assignment submission,online feedback},
pages = {147--152},
title = {{Streamlining grading toward better feedback}},
url = {http://dl.acm.org/citation.cfm?id=2462506},
year = {2013}
}
@article{Vakilian2014,
abstract = {Modern Integrated Development Environments (IDEs) sup- port many refactorings. Yet, programmers greatly under- use automated refactorings. Recent studies have applied traditional usability testing methodologies such as surveys, lab studies, and interviews to nd the usability problems of refactoring tools. However, these methodologies are expen- sive and can only identify certain kinds of usability problems. The critical incident technique (CIT) is a general methodol- ogy that uncovers usability problems by analyzing troubling user interactions. We derive a method from CIT, arguing that alternate refactoring paths are indicators of the usabil- ity problems of refactoring tools. We de ne an alternate refactoring path as a user interaction path that contains cancellations, reported messages, or repeated invocations of the refactoring tool. We evaluated our method on a large corpus of refactoring usage data, which we collected during a eld study on 36 programmers over three months. This method revealed 15 usability problems, 13 of which were previously unknown. We reported these problems and pro- posed design improvements to Eclipse developers. The de- velopers acknowledged all of the problems and have already xed four of them. This result suggests that analyzing alter- nate paths is e ective at discovering the usability problems of interactive program transformation (IPT) tools.},
author = {Vakilian, Mohsen and Johnson, Ralph E},
doi = {10.1145/2568225.2568282},
file = {:Users/fox/Documents/fox/papers/mendeley/Vakilian, Johnson - 2014 - Alternate Refactoring Paths Reveal Usability Problems.pdf:pdf},
isbn = {9781450327565},
journal = {36th International Conference on Software Engineering (ICSE 2014)},
keywords = {critical incident,empirical,evaluation,refactoring,usability},
pages = {1106--1116},
title = {{Alternate Refactoring Paths Reveal Usability Problems}},
year = {2014}
}
@article{Mantyla2006,
annote = {Most of the scientific literature on refactoring has focused on the effectiveness of tools and techniques, rather than the role of the human programmer in making refactoring decisions. This study tries to do so using a mix of software engineering students with varying experience levels. One finding is that only experienced SWE's (4+ years work experience) were able to spot the need for more complex refactorings such as PassThroughParameters and WrongMethodLocation (a relative of FeatureEnvy), whereas less-experienced programmers were readily able to spot the need for simpler refactorings.},
author = {M{\"{a}}ntyl{\"{a}}, MV and Lassenius, Casper},
file = {:Users/fox/Documents/fox/papers/mendeley/M{\"{a}}ntyl{\"{a}}, Lassenius - 2006 - Drivers for software refactoring decisions.pdf:pdf},
isbn = {1595932186},
journal = {Proceedings of the 2006 ACM/IEEE {\ldots}},
keywords = {evolvability,maintainability,qualitative analysis,refactoring},
pages = {297--306},
title = {{Drivers for software refactoring decisions}},
url = {http://dl.acm.org/citation.cfm?id=1159778},
year = {2006}
}
@article{Brandt2009,
abstract = {This paper investigates the role of online resources in problem solving. We look specifically at how programmers - an exemplar form of knowledge workers - opportunistically interleave Web foraging, learning, and writing code. We describe two studies of how programmers use online resources. The first, conducted in the lab, observed participants' Web use while building an online chat room. We found that programmers leverage online resources with a range of intentions: They engage in just-in-time learning of new skills and approaches, clarify and extend their existing knowledge, and remind themselves of details deemed not worth remembering. The results also suggest that queries for different purposes have different styles and durations. Do programmers' queries "in the wild" have the same range of intentions, or is this result an artifact of the particular lab setting? We analyzed a month of queries to an online programming portal, examining the lexical structure, refinements made, and result pages visited. Here we also saw traits that suggest the Web is being used for learning and reminding. These results contribute to a theory of online resource usage in programming, and suggest opportunities for tools to facilitate online knowledge work.},
annote = {Each of 20 participants (experienced student programmers; little professional experience) spent {\~{}}19{\%} of programming task time doing Web searches while programming: learning, reference, clarification. The first is about learning new concept, including code snippets, can take 10s minutes; others are recalling details, clarification, or debugging for already-known concept, 10s seconds-few minutes. Approx 1/3 of finished code per participant had been copy-pasted from Web examples/tutorials, and that code is rarely tested at copy-paste time,making some bugs hard to find. A second study using posts on Adobe developer forum found that query content (code, naturla language, both) mostly predicts which type of activity.},
author = {Brandt, Joel and Guo, Philip J and Lewenstein, Joel and Dontcheva, Mira and Klemmer, Scott R and Francisco, San},
doi = {10.1145/1518701.1518944},
file = {:Users/fox/Documents/fox/papers/mendeley/Brandt et al. - 2009 - Two Studies of Opportunistic Programming Interleaving Web Foraging, Learning, and Writing Code.pdf:pdf},
isbn = {9781605582467},
journal = {ACM Conference on Human Factors in Computing Systems},
keywords = {World,opportunistic programming,problem solving},
pages = {1589--1598},
title = {{Two Studies of Opportunistic Programming: Interleaving Web Foraging, Learning, and Writing Code}},
year = {2009}
}
@article{Mantyla2005,
abstract = {Using inter-rater agreement to see if developers agree on the presence of certain code smells (expt. 1) or whether a method should be refactored [without asking about specific code smells] (expt 2), for "simple" code smells there was high inter-rater agreement, and code metrics were a good predictor of the ratings. For more complex smells (eg Feature Envy), concordance was lower, and metrics-based regression explained only 30{\%} of the refactoring decisions.},
annote = {Using inter-rater agreement to see if developers agree on the presence of certain code smells (expt. 1) or whether a method should be refactored [without asking about specific code smells] (expt 2), for "simple" code smells there was high inter-rater agreement, and code metrics were a good predictor of the ratings. For more complex smells (eg Feature Envy), concordance was lower, and metrics-based regression explained only 30{\%} of the refactoring decisions.},
author = {M{\"{a}}ntyl{\"{a}}, M},
file = {:Users/fox/Documents/fox/papers/mendeley/M{\"{a}}ntyl{\"{a}} - 2005 - An experiment on subjective evolvability evaluation of object-oriented software explaining factors and interrater agr.pdf:pdf},
journal = {ISESE},
pages = {134--138},
title = {{An experiment on subjective evolvability evaluation of object-oriented software: explaining factors and interrater agreement.}},
url = {http://lib.tkk.fi/Diss/2009/isbn9789512298570/article3.pdf},
year = {2005}
}
@article{Ko2004,
author = {Ko, Andrew J and Myers, Brad A and Aung, Htet Htet},
file = {:private/tmp/Six Learning Barriers in End-User Programming Systems.pdf:pdf},
journal = {Visual Languages and Human Centric Computing, 2004 IEEE Symposium on},
pages = {199--206},
title = {{Six learning barriers in end-user programming systems}},
year = {2004}
}
@article{Morrison2011a,
abstract = {It is important for students to be able to select and apply the appropriate data structure for the problem to be solved. Testing this knowledge on exams can be difficult, however. We examined 59 data structures final exams and found only 36 that contained questions involving the application of data structures. To promote assessment of this knowledge in the data structures course, we present a framework for classifying apply exam questions, with illustrations from the exams collected. We then show how a number of questions can be developed by varying a single rich apply question along the dimensions of this framework},
annote = {The authors collect various exam questions about},
author = {Morrison, Briana B and Clancy, Mike and McCartney, Robert and Richards, Brad and Sanders, Kate},
doi = {10.1145/1953163.1953269},
file = {:private/tmp/Applying{\_}data{\_}structures{\_}in{\_}exams.pdf:pdf},
isbn = {1450305008},
journal = {Proceedings of the 42nd ACM technical symposium on Computer science education},
keywords = {apply,assessment,cs2,data structures,exams},
pages = {353--358},
title = {{Applying data structures in exams}},
year = {2011}
}
@article{Clancy2004,
author = {Clancy, Michael},
file = {:Users/fox/Documents/fox/papers/mendeley/misconceptions-ult2.pdf:pdf},
isbn = {9026519699},
journal = {Computer Science Education Research},
number = {1993},
pages = {85--100},
title = {{Misconceptions and Attitudes that Interfere with Learning to Program}},
year = {2004}
}
@article{Brown,
author = {Brown, Neil C C and Altadmri, Amjad},
doi = {10.1145/2632320.2632343},
file = {:Users/fox/Documents/fox/papers/mendeley/p43-brown.pdf:pdf},
isbn = {9781450327558},
keywords = {educators,programming mistakes},
title = {{Investigating Novice Programming Mistakes : Educator Beliefs vs Student Data}}
}
@article{Lane2005a,
abstract = {For beginning programmers, inadequate problem solving and planning skills are among the most salient of their weaknesses. In this paper, we test the efficacy of natural language tutoring to teach and scaffold acquisition of these skills. We describe ProPL (Pro-PELL), a dialogue-based intelligent tutoring system that elicits goal decompositions and program plans from students in natural language. The system uses a variety of tutoring tactics that leverage students' intuitive understandings of the problem, how it might be solved, and the underlying concepts of programming. We report the results of a small-scale evaluation comparing students who used ProPL with a control group who read the same content. Our primary findings are that students who received tutoring from ProPL seem to have developed an improved ability to solve the composition problem and displayed behaviors that suggest they were able to think at greater levels of abstraction than students in the read-only group. Reprinted by permission of the publisher.},
annote = {ProPL tries to scaffold students' decompositoin of a programming problem into subtasks, and re-composition of the subtasks into a complete solution, by NLP dialogues. It uses the Atlas domain-independent dialogue management system, whose main abstraction is a Knowledge Construction Dialogue (KCD) that identifies a desired main line of reasoning, detects students' deviation from that main line, and responds with either subdialogues to guide them back or "bottom-out" subdialogues that give away an answer or subanswer. Adding a typical problem to ProPL takes a domain expert {\~{}}1.5 hrs/KCD = about 50 hours per problem.

This paper doesn't detail the implementation of ProPL but describes an experiment to see whether tutored students learn these skills more effectively than a control using static text "closely resembling" the text chunks used in ProPL dialogues. There was a diagnostic pre-test and transfer post-test, but main evaluation was scoring the student's process of developing the code (3 problems) in terms of the number of errors committed per attempt (merge errors are problems merging subtasks; omission errors result from omitting a necessary subtask; etc). Tutored students outperformed control with an effect size of {\textgreater}2.0. The authors interpret this as evidence that ProPL students are thinking at the plan/schema level rather than the line-by-line code-construction approach often taken by novices (though that is not the research question they set out to answer).

ProPL students self-reported a lower perceived level of understanding of the material than control students; authors think it may be because ProPL students may receive negative feedback from the tutor but control students don't. They cite "The illusion of knowing" (Glenberg et al. 1982) as a possible explanation.

ProPL students rated the "design notes" provided in ProPL as more valuable than pseudocode, unlike control students; authors take this as evidence that tutored students are being trained to think at a higher (plan-like vs code-like) level of abstraction.

The post-test showed more modest results: tutored students still outperformed control students on code-arrangement tasks, but post-test results don't confirm the hypothesis that ProPL students learn these skills more effectively than control.},
author = {Lane, H Chad and VanLehn, Kurt},
doi = {10.1080/08993400500224286},
file = {:Users/fox/Documents/fox/papers/mendeley/Teaching the tacit knowledge of programming to noviceswith natural language tutoring.pdf:pdf},
isbn = {08993408},
issn = {0899-3408},
journal = {Computer Science Education},
keywords = {Computer programmers,Computer programming -- Study {\&} teaching,Computer science,Computer software -- Study {\&} teaching,Computer training,Education,Natural language processing (Computer science),Students,Teaching methods,Theory of knowledge,Tutors {\&} tutoring},
number = {3},
pages = {183--201},
pmid = {507822510},
title = {{Teaching the Tacit Knowledge of Programming to Novices with Natural Language Tutoring}},
url = {http://search.ebscohost.com/login.aspx?direct=true{\&}db=eue{\&}AN=507822510{\&}site=ehost-live{\&}scope=site},
volume = {15},
year = {2005}
}
@article{Le2014,
annote = {Most AI-based tutors to help learn programming are based on providing feedback to individual students, with varying levels of AI-ness (eg NLP for dialogue-based tutors) and program analysis. In general the tutors work by trying to identify students' intentions before detecting and giving feedback about errors. Virtually all surveyed in this paper focus on correctness. Almost none focus on teaching a pair or group of students. The main categories of the survey are example-based (show annotated example, then ask student to solve similar problem); simulation-based (eg code tracing visualization, graphical languages); NLP dialogue-based; program-analysis-based; feedback-based, including those that continuously refine the cognitive model of the student by taking into account new errors made by the student and incorporating those into the "buggy rules" catalog used to determine some feedback actions; and collaboration-based (essentially trying to scaffold {\&} monitor collaborative learning).},
author = {Le, Nguyen-thinh and Strickroth, Sven and Gross, Sebastian and Pinkwart, Niels},
doi = {10.1007/978-3-319-06569-4},
file = {:Users/fox/Documents/fox/papers/mendeley/A-Review-of-AI-Supported-Tutoring-Approaches-for-Learning-Programming (1).pdf:pdf},
isbn = {978-3-319-06568-7},
journal = {ICCSAMA},
keywords = {computer-supported collaborative learning,intelligent tu-,pair learning,programming,toring systems},
pages = {267--279},
title = {{A review of AI-supported tutoring approaches for learning programming}},
url = {http://link.springer.com/10.1007/978-3-319-06569-4},
volume = {282},
year = {2013}
}
@article{Wang2017,
abstract = {Designing engaging learning content is important but diffi- cult, and typically involves a lot of manual specification. We present a unified framework that utilizes automatic problem decomposition and partial ordering graph construction to fa- cilitate multiple workflows: knowledge assessment and pro- gression analysis and design. We present results from a study with 847 participants in an online Japanese-language assess- ment tool demonstrating that our framework can efficiently measure student ability and predict student performance on specific problems. We also present results from analysis of curricula showing that the progressions of two different text- books are surprisingly similar, and that our framework can lead to the discovery of general principles of expert progres- sion design. Finally, we demonstrate automatic progression generation with desired sequencing and pacing, allowing for tailoring of progressions and mapping of parameters extracted from one curriculum onto another.},
author = {Wang, Shuhan and He, Fang and Andersen, Erik},
doi = {10.1145/3025453.3025841},
file = {:Users/fox/Documents/fox/papers/mendeley/chi2017{\_}progressions.pdf:pdf},
isbn = {9781450346559},
journal = {Chi '17 [in Press]},
keywords = {automatic problem decomposition,education,knowledge assessment,progression analysis and design},
pages = {937--948},
title = {{A Unified Framework for Knowledge Assessment and Progression Analysis and Design}},
year = {2017}
}
@article{Andersen2013,
abstract = {A key challenge in teaching a procedural skill is finding an ef- fective progression of example problems that the learner can solve in order to internalize the procedure. In many learning domains, generation of such problems is typically done by hand and there are few tools to help automate this process. We reduce this effort by borrowing ideas from test input gen- eration in software engineering. We show how we can use execution traces as a framework for abstracting the character- istics of a given procedure and defining a partial ordering that reflects the relative difficulty of two traces. We also show how we can use this framework to analyze the completeness of expert-designed progressions and fill in holes. Furthermore, we demonstrate how our framework can automatically syn- thesize new problems by generating large sets of problems for elementary and middle school mathematics and synthesizing hundreds of levels for a popular algebra-learning game. We present the results of a user study with this game confirming that our partial ordering can predict user evaluation of proce- dural difficulty better than baseline methods.},
annote = {1. formalize procedure to be learned as pseudocode; label each basic blocks, conditoinals, etc w/a symbol/lexeme.
2. rank cxity of 2 problems: loop w/more iterations {\textgreater} loop w/fewer; conditional that executes some statements {\textgreater} conditional that executes no statements (eg empty else). (Later in the paper they show that just comparing sequence length is not enough to order by cxity, so their proposed rules are actually needed.)
3. use n-gram analysis to partially-order examples by complexity. Eg if every n-gram of trace T1 is also present in T2, then T2 is at least as complex as T1.
You can analyze a progression of problems and find omissions (ie, given traces of successive problems T1 and T2, there is some trace T3 such that T1{\textless}T3{\textless}T2 but there is no problem in the progrssion having trace T3). You can then go search for such a problem, or synthesize one.
Synthesis approach: borrow from test-input-generation in SW Eng. eg Pex system uses Z3 theorem prover/constraint solver to do dynamic symbolic execution of .NET programs and learn to generate test inputs that will steer a piece of code down different paths. So: identify the path (trace) for which you want an equivalent problem, add assertions on that code path (since Pex optimizes for statement coverage, not path coverage, you have to put statements along the path you want covered), and let Pex find an input. You then need a "synthesis rule" to generate an example of a particular basic block (eg "numerator ≤ 50", "denominator ≤ 50")},
author = {Andersen, Erik and Gulwani, Sumit and Popovic, Zoran},
doi = {10.1145/2470654.2470764},
file = {:Users/fox/Documents/fox/papers/mendeley/chi13.pdf:pdf},
isbn = {9781450318990},
journal = {Proceedings of the SIGCHI Conference on Human Factors in Computing Systems},
pages = {773--782},
title = {{A trace-based framework for analyzing and synthesizing educational progressions}},
url = {http://delivery.acm.org/10.1145/2480000/2470764/p773-andersen.pdf?ip=147.46.43.52{\&}id=2470764{\&}acc=ACTIVE SERVICE{\&}key=0EC22F8658578FE1.D83A6478590749B7.4D4702B0C3E38B35.4D4702B0C3E38B35{\&}CFID=359893123{\&}CFTOKEN=38771235{\&}{\_}{\_}acm{\_}{\_}=1403181674{\_}a623ef71392610f696ef},
year = {2013}
}
@article{Vizcaino2005,
abstract = {This paper describes a Simulated Student architecture designed to detect and avoid three situations that decrease the benefits of learning in collaboration. These are off-topic conversations, students with passive behaviour and problems related to students' learning. In order to check the efficiency of the model in a real case a Simulated Student, which has the features described in the model, was added to a collaborative, synchronous system for learning programming. This paper describes the experiment undertaken to test the efficiency of the Simulated Student at correcting the three negative situations. The experiment showed that in the majority of the situations the Simulated Student worked correctly, thus proving that the model proposed is adequate in the avoidance of negative situations.},
author = {Vizca{\'{i}}no, Aurora},
file = {:Users/fox/Documents/fox/papers/mendeley/1018{\_}Vizcaino05.pdf:pdf},
isbn = {1560-4292},
issn = {1560-4292},
journal = {International Journal of Artificial Intelligence in Education},
keywords = {collaborative learning,off-topic conversation,passive students,simulated student},
pages = {3--40},
title = {{A Simulated Student Can Improve Collaborative Learning}},
volume = {15},
year = {2005}
}
